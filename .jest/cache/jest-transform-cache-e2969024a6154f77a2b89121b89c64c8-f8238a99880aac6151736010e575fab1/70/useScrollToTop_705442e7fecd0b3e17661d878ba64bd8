0af516a7ac420e4eca60d5eb322c6b8c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useScrollToTop;

var React = _interopRequireWildcard(require("react"));

var _core = require("@react-navigation/core");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function getScrollableNode(ref) {
  if (ref.current == null) {
    return null;
  }

  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {
    return ref.current;
  } else if ('getScrollResponder' in ref.current) {
    return ref.current.getScrollResponder();
  } else if ('getNode' in ref.current) {
    return ref.current.getNode();
  } else {
    return ref.current;
  }
}

function useScrollToTop(ref) {
  var navigation = (0, _core.useNavigation)();
  var route = (0, _core.useRoute)();
  React.useEffect(function () {
    var current = navigation;

    while (current && current.dangerouslyGetState().type !== 'tab') {
      current = current.dangerouslyGetParent();
    }

    if (!current) {
      return;
    }

    var unsubscribe = current.addListener('tabPress', function (e) {
      var isFocused = navigation.isFocused();
      var isFirst = navigation === current || navigation.dangerouslyGetState().routes[0].key === route.key;
      requestAnimationFrame(function () {
        var scrollable = getScrollableNode(ref);

        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {
          if ('scrollToTop' in scrollable) {
            scrollable.scrollToTop();
          } else if ('scrollTo' in scrollable) {
            scrollable.scrollTo({
              y: 0,
              animated: true
            });
          } else if ('scrollToOffset' in scrollable) {
            scrollable.scrollToOffset({
              offset: 0,
              animated: true
            });
          } else if ('scrollResponderScrollTo' in scrollable) {
            scrollable.scrollResponderScrollTo({
              y: 0,
              animated: true
            });
          }
        }
      });
    });
    return unsubscribe;
  }, [navigation, ref, route.key]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,