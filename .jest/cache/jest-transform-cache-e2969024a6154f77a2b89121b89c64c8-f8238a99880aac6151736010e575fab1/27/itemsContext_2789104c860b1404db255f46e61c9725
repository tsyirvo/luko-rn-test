c35c143254ca934e52ee4c573e22a73e
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.useItemsContext = exports.ItemsContext = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var ItemsContext = (0, _react.createContext)({
  items: [],
  contractItems: {
    paris: {
      total: 0,
      items: []
    },
    london: {
      total: 0,
      items: []
    }
  }
});
exports.ItemsContext = ItemsContext;

var useItemsContext = function useItemsContext() {
  return (0, _react.useContext)(ItemsContext);
};

exports.useItemsContext = useItemsContext;

var ItemsProvider = function ItemsProvider(_ref) {
  var children = _ref.children;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      items = _useState2[0],
      setItems = _useState2[1];

  var _useState3 = (0, _react.useState)({
    paris: {
      total: 0,
      items: []
    },
    london: {
      total: 0,
      items: []
    }
  }),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      contractItems = _useState4[0],
      setContractItems = _useState4[1];

  console.log('items', items);
  var contextValues = (0, _react.useMemo)(function () {
    return {
      items: items,
      setItems: setItems,
      contractItems: contractItems,
      setContractItems: setContractItems
    };
  }, [items, contractItems]);
  return _react.default.createElement(ItemsContext.Provider, {
    value: contextValues
  }, children);
};

var _default = ItemsProvider;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZW1zQ29udGV4dC50c3giXSwibmFtZXMiOlsiSXRlbXNDb250ZXh0IiwiaXRlbXMiLCJjb250cmFjdEl0ZW1zIiwicGFyaXMiLCJ0b3RhbCIsImxvbmRvbiIsInVzZUl0ZW1zQ29udGV4dCIsIkl0ZW1zUHJvdmlkZXIiLCJjaGlsZHJlbiIsInNldEl0ZW1zIiwic2V0Q29udHJhY3RJdGVtcyIsImNvbnNvbGUiLCJsb2ciLCJjb250ZXh0VmFsdWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQW9DTyxJQUFNQSxZQUFZLEdBQUcsMEJBQWdDO0FBQzFEQyxFQUFBQSxLQUFLLEVBQUUsRUFEbUQ7QUFFMURDLEVBQUFBLGFBQWEsRUFBRTtBQUNiQyxJQUFBQSxLQUFLLEVBQUU7QUFDTEMsTUFBQUEsS0FBSyxFQUFFLENBREY7QUFFTEgsTUFBQUEsS0FBSyxFQUFFO0FBRkYsS0FETTtBQUtiSSxJQUFBQSxNQUFNLEVBQUU7QUFDTkQsTUFBQUEsS0FBSyxFQUFFLENBREQ7QUFFTkgsTUFBQUEsS0FBSyxFQUFFO0FBRkQ7QUFMSztBQUYyQyxDQUFoQyxDQUFyQjs7O0FBY0EsSUFBTUssZUFBZSxHQUFHLFNBQWxCQSxlQUFrQjtBQUFBLFNBQU0sdUJBQVdOLFlBQVgsQ0FBTjtBQUFBLENBQXhCOzs7O0FBRVAsSUFBTU8sYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixPQUF5QjtBQUFBLE1BQXRCQyxRQUFzQixRQUF0QkEsUUFBc0I7O0FBQUEsa0JBQ25CLHFCQUFTLEVBQVQsQ0FEbUI7QUFBQTtBQUFBLE1BQ3RDUCxLQURzQztBQUFBLE1BQy9CUSxRQUQrQjs7QUFBQSxtQkFFSCxxQkFBUztBQUNqRE4sSUFBQUEsS0FBSyxFQUFFO0FBQ0xDLE1BQUFBLEtBQUssRUFBRSxDQURGO0FBRUxILE1BQUFBLEtBQUssRUFBRTtBQUZGLEtBRDBDO0FBS2pESSxJQUFBQSxNQUFNLEVBQUU7QUFDTkQsTUFBQUEsS0FBSyxFQUFFLENBREQ7QUFFTkgsTUFBQUEsS0FBSyxFQUFFO0FBRkQ7QUFMeUMsR0FBVCxDQUZHO0FBQUE7QUFBQSxNQUV0Q0MsYUFGc0M7QUFBQSxNQUV2QlEsZ0JBRnVCOztBQWE3Q0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFxQlgsS0FBckI7QUFFQSxNQUFNWSxhQUFhLEdBQUcsb0JBQ3BCO0FBQUEsV0FBTztBQUNMWixNQUFBQSxLQUFLLEVBQUxBLEtBREs7QUFFTFEsTUFBQUEsUUFBUSxFQUFSQSxRQUZLO0FBR0xQLE1BQUFBLGFBQWEsRUFBYkEsYUFISztBQUlMUSxNQUFBQSxnQkFBZ0IsRUFBaEJBO0FBSkssS0FBUDtBQUFBLEdBRG9CLEVBT3BCLENBQUNULEtBQUQsRUFBUUMsYUFBUixDQVBvQixDQUF0QjtBQVVBLFNBQ0UsNkJBQUMsWUFBRCxDQUFjLFFBQWQ7QUFBdUIsSUFBQSxLQUFLLEVBQUVXO0FBQTlCLEtBQ0dMLFFBREgsQ0FERjtBQUtELENBOUJEOztlQWdDZUQsYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICBjcmVhdGVDb250ZXh0LFxuICBSZWFjdEVsZW1lbnQsXG4gIHVzZUNvbnRleHQsXG4gIHVzZU1lbW8sXG4gIHVzZVN0YXRlLFxufSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIEl0ZW0gPSB7XG4gIGNvbnRyYWN0OiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgY2F0ZWdvcnk6IHN0cmluZztcbiAgcHVyY2hhc2VEYXRlOiBEYXRlO1xuICBwdXJjaGFzZVZhbHVlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIG1haW5QaWN0dXJlOiBzdHJpbmc7XG4gIHJlY2VpcHQ6IHN0cmluZztcbiAgYWRkaXRpb25hbFBpY3R1cmU6IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBDb250cmFjdCA9IHtcbiAgdG90YWw6IG51bWJlcjtcbiAgaXRlbXM6IHN0cmluZ1tdO1xufTtcbmV4cG9ydCB0eXBlIENvbnRyYWN0Q2l0aWVzID0gJ3BhcmlzJyB8ICdsb25kb24nO1xuZXhwb3J0IHR5cGUgSXRlbXNDb250ZXh0VHlwZSA9IHtcbiAgaXRlbXM6IEl0ZW1bXTtcbiAgY29udHJhY3RJdGVtczoge1xuICAgIHBhcmlzOiBDb250cmFjdDtcbiAgICBsb25kb246IENvbnRyYWN0O1xuICB9O1xufTtcblxudHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW46IFJlYWN0RWxlbWVudDtcbn07XG5cbmV4cG9ydCBjb25zdCBJdGVtc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PEl0ZW1zQ29udGV4dFR5cGU+KHtcbiAgaXRlbXM6IFtdLFxuICBjb250cmFjdEl0ZW1zOiB7XG4gICAgcGFyaXM6IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgaXRlbXM6IFtdLFxuICAgIH0sXG4gICAgbG9uZG9uOiB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB1c2VJdGVtc0NvbnRleHQgPSAoKSA9PiB1c2VDb250ZXh0KEl0ZW1zQ29udGV4dCk7XG5cbmNvbnN0IEl0ZW1zUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBbaXRlbXMsIHNldEl0ZW1zXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2NvbnRyYWN0SXRlbXMsIHNldENvbnRyYWN0SXRlbXNdID0gdXNlU3RhdGUoe1xuICAgIHBhcmlzOiB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICB9LFxuICAgIGxvbmRvbjoge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBpdGVtczogW10sXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc29sZS5sb2coJ2l0ZW1zJywgaXRlbXMpO1xuXG4gIGNvbnN0IGNvbnRleHRWYWx1ZXMgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBpdGVtcyxcbiAgICAgIHNldEl0ZW1zLFxuICAgICAgY29udHJhY3RJdGVtcyxcbiAgICAgIHNldENvbnRyYWN0SXRlbXMsXG4gICAgfSksXG4gICAgW2l0ZW1zLCBjb250cmFjdEl0ZW1zXSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxJdGVtc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZXN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvSXRlbXNDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSXRlbXNQcm92aWRlcjtcbiJdfQ==