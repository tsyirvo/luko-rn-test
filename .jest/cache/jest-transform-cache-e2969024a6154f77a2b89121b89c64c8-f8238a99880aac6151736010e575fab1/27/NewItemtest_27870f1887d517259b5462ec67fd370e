046d984b9b22774f48678e2982663498
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn(function () {
      return {
        navigate: jest.fn(),
        reset: jest.fn(),
        goBack: jest.fn()
      };
    }),
    useRoute: function useRoute() {
      return {
        params: {
          contract: 'paris'
        }
      };
    }
  };
});

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("@testing-library/react-native");

var useForm = _interopRequireWildcard(require("../../components/ItemForm/hooks/useForm"));

var itemsContext = _interopRequireWildcard(require("../../contexts/itemsContext"));

var _utils = _interopRequireDefault(require("../../tests/utils"));

var _NewItem = _interopRequireDefault(require("./NewItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

var setItems = jest.fn();
var setContractItems = jest.fn();
var contractItems = {
  paris: {
    total: 0,
    items: []
  },
  london: {
    total: 0,
    items: []
  }
};
jest.spyOn(itemsContext, 'useItemsContext').mockImplementation(function () {
  return {
    items: [],
    contractItems: contractItems,
    setItems: setItems,
    setContractItems: setContractItems
  };
});
var formData = {
  name: '',
  purchaseValue: '',
  description: '',
  mainPicture: '',
  receipt: '',
  additionalPicture: ''
};
var isFormValid = false;
jest.spyOn(useForm, 'default').mockImplementation(function () {
  return {
    formData: formData,
    isFormValid: isFormValid,
    setName: jest.fn(),
    setPurchaseValue: jest.fn(),
    setDescription: jest.fn(),
    setMainPicture: jest.fn(),
    setReceipt: jest.fn(),
    setAdditionalPicture: jest.fn()
  };
});
describe('NewItem', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('should not add an item with an empty form', function () {
    var _render = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
  it('should add an item with a filled form', function () {
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: 'Test',
      purchaseValue: '100',
      mainPicture: '/pic',
      receipt: '/pic'
    });
    isFormValid = true;

    var _render2 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render2.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).toHaveBeenCalled();
    expect(setContractItems).toHaveBeenCalled();
  });
  it('should not add an item for an unsupported amount', function () {
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: 'Test',
      purchaseValue: '100000',
      mainPicture: '/pic',
      receipt: '/pic'
    });
    isFormValid = true;

    var _render3 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render3.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
  it('should not add an item if already insured', function () {
    var itemName = 'test';
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: itemName,
      purchaseValue: '100',
      mainPicture: '/pic',
      receipt: '/pic'
    });
    isFormValid = true;
    contractItems = _objectSpread(_objectSpread({}, contractItems), {}, {
      paris: {
        total: 100,
        items: [itemName]
      }
    });

    var _render4 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render4.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,