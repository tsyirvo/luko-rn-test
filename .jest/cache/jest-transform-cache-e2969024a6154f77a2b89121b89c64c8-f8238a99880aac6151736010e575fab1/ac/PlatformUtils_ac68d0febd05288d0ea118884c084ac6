416b8c096eb7beb444974b889f954e65
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocalAssets = getLocalAssets;
exports.getManifest = getManifest;
exports.downloadAsync = downloadAsync;
exports.manifestBaseUrl = exports.IS_BARE_ENV_WITHOUT_UPDATES = exports.IS_ENV_WITH_UPDATES_ENABLED = exports.IS_BARE_ENV_WITH_UPDATES = exports.IS_MANAGED_ENV = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _core = require("@unimodules/core");

var _blueimpMd = _interopRequireDefault(require("blueimp-md5"));

var _expoConstants = _interopRequireDefault(require("expo-constants"));

var FileSystem = _interopRequireWildcard(require("expo-file-system"));

var _AssetUris = require("./AssetUris");

var _NativeModulesProxy$E, _NativeModulesProxy$E2;

var IS_MANAGED_ENV = !!_expoConstants.default.appOwnership;
exports.IS_MANAGED_ENV = IS_MANAGED_ENV;
var IS_BARE_ENV_WITH_UPDATES = !IS_MANAGED_ENV && !!((_NativeModulesProxy$E = _core.NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E.isEnabled) && !((_NativeModulesProxy$E2 = _core.NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E2.isUsingEmbeddedAssets);
exports.IS_BARE_ENV_WITH_UPDATES = IS_BARE_ENV_WITH_UPDATES;
var IS_ENV_WITH_UPDATES_ENABLED = IS_MANAGED_ENV || IS_BARE_ENV_WITH_UPDATES;
exports.IS_ENV_WITH_UPDATES_ENABLED = IS_ENV_WITH_UPDATES_ENABLED;
var IS_BARE_ENV_WITHOUT_UPDATES = !IS_MANAGED_ENV && !IS_BARE_ENV_WITH_UPDATES;
exports.IS_BARE_ENV_WITHOUT_UPDATES = IS_BARE_ENV_WITHOUT_UPDATES;

function getLocalAssets() {
  var _NativeModulesProxy$E3, _NativeModulesProxy$E4;

  return (_NativeModulesProxy$E3 = (_NativeModulesProxy$E4 = _core.NativeModulesProxy.ExpoUpdates) == null ? void 0 : _NativeModulesProxy$E4.localAssets) != null ? _NativeModulesProxy$E3 : {};
}

function getManifest() {
  var _Constants$manifest;

  return (_Constants$manifest = _expoConstants.default.manifest) != null ? _Constants$manifest : {};
}

var manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
exports.manifestBaseUrl = manifestBaseUrl;

function downloadAsync(uri, hash, type, name) {
  return _regenerator.default.async(function downloadAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!IS_MANAGED_ENV) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return", _downloadAsyncManagedEnv(uri, hash, type, name));

        case 2:
          return _context.abrupt("return", _downloadAsyncUnmanagedEnv(uri, hash, type));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

function _downloadAsyncManagedEnv(uri, hash, type, name) {
  var cacheFileId, localUri, _await$FileSystem$get, exists, md5, _await$FileSystem$dow;

  return _regenerator.default.async(function _downloadAsyncManagedEnv$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          cacheFileId = hash || (0, _blueimpMd.default)(uri);
          localUri = FileSystem.cacheDirectory + "ExponentAsset-" + cacheFileId + "." + type;
          _context2.next = 4;
          return _regenerator.default.awrap(FileSystem.getInfoAsync(localUri, {
            md5: true
          }));

        case 4:
          _await$FileSystem$get = _context2.sent;
          exists = _await$FileSystem$get.exists;
          md5 = _await$FileSystem$get.md5;

          if (!(!exists || hash !== null && md5 !== hash)) {
            _context2.next = 14;
            break;
          }

          _context2.next = 10;
          return _regenerator.default.awrap(FileSystem.downloadAsync(uri, localUri, {
            md5: true
          }));

        case 10:
          _await$FileSystem$dow = _context2.sent;
          md5 = _await$FileSystem$dow.md5;

          if (!(hash !== null && md5 !== hash)) {
            _context2.next = 14;
            break;
          }

          throw new Error("Downloaded file for asset '" + name + "." + type + "' " + ("Located at " + uri + " ") + "failed MD5 integrity check");

        case 14:
          return _context2.abrupt("return", localUri);

        case 15:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
}

function _downloadAsyncUnmanagedEnv(uri, hash, type) {
  var cacheFileId, localUri;
  return _regenerator.default.async(function _downloadAsyncUnmanagedEnv$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!uri.startsWith('file://')) {
            _context3.next = 2;
            break;
          }

          return _context3.abrupt("return", uri);

        case 2:
          cacheFileId = hash || (0, _blueimpMd.default)(uri);
          localUri = FileSystem.cacheDirectory + "ExponentAsset-" + cacheFileId + "." + type;
          _context3.next = 6;
          return _regenerator.default.awrap(FileSystem.downloadAsync(uri, localUri));

        case 6:
          return _context3.abrupt("return", localUri);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFBO0FBQUE7O0FBQUEsNENBSVcsR0FKWDs7QUFBQTtBQU9RLFVBQUEsV0FQUixHQU9zQixJQUFJLElBQUksd0JBQVcsR0FBWCxDQVA5QjtBQVFRLFVBQUEsUUFSUixHQVFzQixVQUFVLENBQUMsY0FSakMsc0JBUWdFLFdBUmhFLFNBUStFLElBUi9FO0FBQUE7QUFBQSw0Q0FZUSxVQUFVLENBQUMsYUFBWCxDQUF5QixHQUF6QixFQUE4QixRQUE5QixDQVpSOztBQUFBO0FBQUEsNENBYVMsUUFiVDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hdGl2ZU1vZHVsZXNQcm94eSB9IGZyb20gJ0B1bmltb2R1bGVzL2NvcmUnO1xuaW1wb3J0IGNvbXB1dGVNZDUgZnJvbSAnYmx1ZWltcC1tZDUnO1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICdleHBvLWNvbnN0YW50cyc7XG5pbXBvcnQgKiBhcyBGaWxlU3lzdGVtIGZyb20gJ2V4cG8tZmlsZS1zeXN0ZW0nO1xuXG5pbXBvcnQgeyBnZXRNYW5pZmVzdEJhc2VVcmwgfSBmcm9tICcuL0Fzc2V0VXJpcyc7XG5cbi8vIENvbnN0YW50cy5hcHBPd25lcnNoaXAgaXMgb25seSBhdmFpbGFibGUgaW4gbWFuYWdlZCBhcHBzIChFeHBvIGNsaWVudCBhbmQgc3RhbmRhbG9uZSlcbmV4cG9ydCBjb25zdCBJU19NQU5BR0VEX0VOViA9ICEhQ29uc3RhbnRzLmFwcE93bmVyc2hpcDtcblxuLy8gSW4gdGhlIGZ1dHVyZSAoU0RLMzgrKSBleHBvLXVwZGF0ZXMgaXMgbGlrZWx5IHRvIGJlIHVzZWQgaW4gbWFuYWdlZCBhcHBzLCBzbyB3ZSBkZWNpZGVcbi8vIHRoYXQgeW91IGFyZSBpbiBhIGJhcmUgYXBwIHdpdGggdXBkYXRlcyBpZiB5b3UncmUgbm90IGluIGEgbWFuYWdlZCBhcHAgYW5kIHlvdSBoYXZlXG4vLyBsb2NhbCBhc3NldHMgYXZhaWxhYmxlLlxuZXhwb3J0IGNvbnN0IElTX0JBUkVfRU5WX1dJVEhfVVBEQVRFUyA9XG4gICFJU19NQU5BR0VEX0VOViAmJlxuICAhIU5hdGl2ZU1vZHVsZXNQcm94eS5FeHBvVXBkYXRlcz8uaXNFbmFibGVkICYmXG4gIC8vIGlmIGV4cG8tdXBkYXRlcyBpcyBpbnN0YWxsZWQgYnV0IHdlJ3JlIHJ1bm5pbmcgZGlyZWN0bHkgZnJvbSB0aGUgZW1iZWRkZWQgYnVuZGxlLCB3ZSBkb24ndCB3YW50XG4gIC8vIHRvIG92ZXJyaWRlIHRoZSBBc3NldFNvdXJjZVJlc29sdmVyXG4gICFOYXRpdmVNb2R1bGVzUHJveHkuRXhwb1VwZGF0ZXM/LmlzVXNpbmdFbWJlZGRlZEFzc2V0cztcblxuZXhwb3J0IGNvbnN0IElTX0VOVl9XSVRIX1VQREFURVNfRU5BQkxFRCA9IElTX01BTkFHRURfRU5WIHx8IElTX0JBUkVfRU5WX1dJVEhfVVBEQVRFUztcblxuLy8gSWYgaXQncyBub3QgbWFuYWdlZCBvciBiYXJlIHcvIHVwZGF0ZXMsIHRoZW4gaXQgbXVzdCBiZSBiYXJlIHcvbyB1cGRhdGVzIVxuZXhwb3J0IGNvbnN0IElTX0JBUkVfRU5WX1dJVEhPVVRfVVBEQVRFUyA9ICFJU19NQU5BR0VEX0VOViAmJiAhSVNfQkFSRV9FTlZfV0lUSF9VUERBVEVTO1xuXG4vLyBHZXQgdGhlIGxvY2FsQXNzZXRzIHByb3BlcnR5IGZyb20gdGhlIEV4cG9VcGRhdGVzIG5hdGl2ZSBtb2R1bGUgc28gdGhhdCB3ZSBkb1xuLy8gbm90IG5lZWQgdG8gaW5jbHVkZSBleHBvLXVwZGF0ZXMgYXMgYSBkZXBlbmRlbmN5IG9mIGV4cG8tYXNzZXRcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbEFzc2V0cygpIHtcbiAgcmV0dXJuIE5hdGl2ZU1vZHVsZXNQcm94eS5FeHBvVXBkYXRlcz8ubG9jYWxBc3NldHMgPz8ge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYW5pZmVzdCgpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgcmV0dXJuIENvbnN0YW50cy5tYW5pZmVzdCA/PyB7fTtcbn1cblxuLy8gQ29tcHV0ZSBtYW5pZmVzdCBiYXNlIFVSTCBpZiBhdmFpbGFibGVcbmV4cG9ydCBjb25zdCBtYW5pZmVzdEJhc2VVcmwgPSBDb25zdGFudHMuZXhwZXJpZW5jZVVybFxuICA/IGdldE1hbmlmZXN0QmFzZVVybChDb25zdGFudHMuZXhwZXJpZW5jZVVybClcbiAgOiBudWxsO1xuXG4vLyBUT0RPOiBob3cgc2hvdWxkIHRoaXMgYmVoYXZlIGluIGJhcmUgYXBwIHdpdGggdXBkYXRlcz8gcmU6IGhhc2hBc3NldEZpbGVzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRBc3luYyh1cmksIGhhc2gsIHR5cGUsIG5hbWUpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoSVNfTUFOQUdFRF9FTlYpIHtcbiAgICByZXR1cm4gX2Rvd25sb2FkQXN5bmNNYW5hZ2VkRW52KHVyaSwgaGFzaCwgdHlwZSwgbmFtZSk7XG4gIH1cblxuICByZXR1cm4gX2Rvd25sb2FkQXN5bmNVbm1hbmFnZWRFbnYodXJpLCBoYXNoLCB0eXBlKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZmlsZSBleGlzdHMgb24gZGlzayBhbHJlYWR5LCBwZXJmb3JtIGludGVncml0eSBjaGVjayBpZiBzby5cbiAqIE90aGVyd2lzZSwgZG93bmxvYWQgaXQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIF9kb3dubG9hZEFzeW5jTWFuYWdlZEVudih1cmksIGhhc2gsIHR5cGUsIG5hbWUpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBjYWNoZUZpbGVJZCA9IGhhc2ggfHwgY29tcHV0ZU1kNSh1cmkpO1xuICBjb25zdCBsb2NhbFVyaSA9IGAke0ZpbGVTeXN0ZW0uY2FjaGVEaXJlY3Rvcnl9RXhwb25lbnRBc3NldC0ke2NhY2hlRmlsZUlkfS4ke3R5cGV9YDtcbiAgbGV0IHsgZXhpc3RzLCBtZDUgfSA9IGF3YWl0IEZpbGVTeXN0ZW0uZ2V0SW5mb0FzeW5jKGxvY2FsVXJpLCB7XG4gICAgbWQ1OiB0cnVlLFxuICB9KTtcbiAgaWYgKCFleGlzdHMgfHwgKGhhc2ggIT09IG51bGwgJiYgbWQ1ICE9PSBoYXNoKSkge1xuICAgICh7IG1kNSB9ID0gYXdhaXQgRmlsZVN5c3RlbS5kb3dubG9hZEFzeW5jKHVyaSwgbG9jYWxVcmksIHtcbiAgICAgIG1kNTogdHJ1ZSxcbiAgICB9KSk7XG4gICAgaWYgKGhhc2ggIT09IG51bGwgJiYgbWQ1ICE9PSBoYXNoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBEb3dubG9hZGVkIGZpbGUgZm9yIGFzc2V0ICcke25hbWV9LiR7dHlwZX0nIGAgK1xuICAgICAgICAgIGBMb2NhdGVkIGF0ICR7dXJpfSBgICtcbiAgICAgICAgICBgZmFpbGVkIE1ENSBpbnRlZ3JpdHkgY2hlY2tgXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbG9jYWxVcmk7XG59XG5cbi8qKlxuICogSnVzdCBkb3dubG9hZCB0aGUgYXNzZXQsIGRvbid0IHBlcmZvcm0gaW50ZWdyaXR5IGNoZWNrIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZVxuICogdGhlIGhhc2ggdG8gY29tcGFyZSBpdCB3aXRoICh3ZSBkb24ndCBoYXZlIGhhc2hBc3NldEZpbGVzIHBsdWdpbikuIEhhc2ggaXNcbiAqIG9ubHkgdXNlZCBmb3IgdGhlIGZpbGUgbmFtZS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2Rvd25sb2FkQXN5bmNVbm1hbmFnZWRFbnYodXJpLCBoYXNoLCB0eXBlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gVE9ETzogZG9lcyB0aGlzIG1ha2Ugc2Vuc2UgdG8gYmFpbCBvdXQgaWYgaXQncyBhbHJlYWR5IGF0IGEgZmlsZSBVUkxcbiAgLy8gYmVjYXVzZSBpdCdzIGFscmVhZHkgYXZhaWxhYmxlIGxvY2FsbHk/XG4gIGlmICh1cmkuc3RhcnRzV2l0aCgnZmlsZTovLycpKSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxuXG4gIGNvbnN0IGNhY2hlRmlsZUlkID0gaGFzaCB8fCBjb21wdXRlTWQ1KHVyaSk7XG4gIGNvbnN0IGxvY2FsVXJpID0gYCR7RmlsZVN5c3RlbS5jYWNoZURpcmVjdG9yeX1FeHBvbmVudEFzc2V0LSR7Y2FjaGVGaWxlSWR9LiR7dHlwZX1gO1xuXG4gIC8vIFdlIGRvbid0IGNoZWNrIHRoZSBGaWxlU3lzdGVtIGZvciBhbiBleGlzdGluZyB2ZXJzaW9uIG9mIHRoZSBhc3NldCBhbmQgd2VcbiAgLy8gYWxzbyBkb24ndCBwZXJmb3JtIGFuIGludGVncml0eSBjaGVjayFcbiAgYXdhaXQgRmlsZVN5c3RlbS5kb3dubG9hZEFzeW5jKHVyaSwgbG9jYWxVcmkpO1xuICByZXR1cm4gbG9jYWxVcmk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9