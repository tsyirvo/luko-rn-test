ed153630b58fc1992333f3a292f18a73
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMultiStyleIconSet;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _createIconSet = _interopRequireDefault(require("./createIconSet"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function createMultiStyleIconSet(styles) {
  var optionsInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var styleNames = Object.keys(styles);

  if (styleNames.length === 0) {
    throw new Error('You need to add at least one style');
  }

  var options = _objectSpread({
    defaultStyle: styleNames[0],
    fallbackFamily: function fallbackFamily(_unused) {
      return styleNames[0];
    },
    glyphValidator: function glyphValidator(_unused, __unused) {
      return true;
    }
  }, optionsInput);

  var iconSets = styleNames.reduce(function (acc, name) {
    var style = styles[name];
    acc[name] = (0, _createIconSet.default)(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});
    return acc;
  }, {});

  function styleFromProps(props) {
    return Object.keys(props).reduce(function (result, propName) {
      return styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result;
    }, options.defaultStyle);
  }

  function getIconSetForProps(props) {
    var name = props.name;
    var style = styleFromProps(props);
    if (options.glyphValidator(name, style)) return iconSets[style];
    var family = options.fallbackFamily(name);

    if (styleNames.indexOf(family) === -1) {
      return options.defaultStyle;
    }

    return iconSets[family];
  }

  function selectIconClass(iconSet, iconClass) {
    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;
  }

  function reduceProps(props) {
    return Object.keys(props).reduce(function (acc, prop) {
      if (styleNames.indexOf(prop) === -1) {
        acc[prop] = props[prop];
      }

      return acc;
    }, {});
  }

  function getStyledIconSet(style) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    if (styleNames.indexOf(style) === -1) {
      return iconSets[options.defaultStyle];
    }

    return !name ? iconSets[styleFromProps((0, _defineProperty2.default)({}, style, true))] : getIconSetForProps((0, _defineProperty2.default)({
      name: name
    }, style, true));
  }

  function getFontFamily() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;
    return getStyledIconSet(style).getFontFamily();
  }

  function getRawGlyphMap() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;
    return getStyledIconSet(style).getRawGlyphMap();
  }

  function hasIcon(name) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.defaultStyle;
    return options.glyphValidator(name, style);
  }

  function createStyledIconClass() {
    var selectClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var IconClass = function (_PureComponent) {
      (0, _inherits2.default)(IconClass, _PureComponent);

      var _super = _createSuper(IconClass);

      function IconClass() {
        (0, _classCallCheck2.default)(this, IconClass);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(IconClass, [{
        key: "render",
        value: function render() {
          var selectedIconSet = getIconSetForProps(this.props);
          var SelectedIconClass = selectIconClass(selectedIconSet, selectClass);
          var props = reduceProps(this.props);
          return _react.default.createElement(SelectedIconClass, props);
        }
      }]);
      return IconClass;
    }(_react.PureComponent);

    IconClass.defaultProps = styleNames.reduce(function (acc, name) {
      acc[name] = false;
      return acc;
    }, {});
    IconClass.font = Object.values(styles).reduce(function (acc, style) {
      acc[style.fontFamily] = style.fontFile;
      return acc;
    }, {});
    IconClass.StyledIconSet = getStyledIconSet;
    IconClass.getFontFamily = getFontFamily;
    IconClass.getRawGlyphMap = getRawGlyphMap;
    IconClass.hasIcon = hasIcon;
    return IconClass;
  }

  var Icon = createStyledIconClass();
  Icon.Button = createStyledIconClass('Button');
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,