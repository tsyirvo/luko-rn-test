9dcb34e26064388a351ccf456fd563fc
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _native = require("@react-navigation/native");

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _AssetUpload = _interopRequireDefault(require("../../components/AssetUpload"));

var _ItemDocuments = _interopRequireDefault(require("../../components/ItemDocuments"));

var _ItemForm = _interopRequireDefault(require("../../components/ItemForm"));

var _useForm2 = _interopRequireDefault(require("../../components/ItemForm/hooks/useForm"));

var _NewItemHeader = _interopRequireDefault(require("../../components/NewItemHeader"));

var _primitives = require("../../components/shared/primitives");

var _SafeView = _interopRequireDefault(require("../../components/shared/SafeView"));

var _itemsContext = require("../../contexts/itemsContext");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var NewItem = function NewItem() {
  var navigation = (0, _native.useNavigation)();

  var _useRoute = (0, _native.useRoute)(),
      params = _useRoute.params;

  var _useForm = (0, _useForm2.default)(),
      formData = _useForm.formData,
      isFormValid = _useForm.isFormValid,
      setName = _useForm.setName,
      setPurchaseValue = _useForm.setPurchaseValue,
      setDescription = _useForm.setDescription,
      setMainPicture = _useForm.setMainPicture,
      setReceipt = _useForm.setReceipt,
      setAdditionalPicture = _useForm.setAdditionalPicture;

  var _useItemsContext = (0, _itemsContext.useItemsContext)(),
      setItems = _useItemsContext.setItems,
      setContractItems = _useItemsContext.setContractItems,
      contractItems = _useItemsContext.contractItems;

  var onSavePress = (0, _react.useCallback)(function () {
    var contract = params.contract;
    var itemPrice = Number(formData.purchaseValue);
    var isContractAmountValid = contractItems[contract].total + itemPrice <= 40000;

    var isItemAlreadyInsured = function isItemAlreadyInsured() {
      var isPresentInContract = Object.values(contractItems).map(function (c) {
        return c.items.includes(formData.name);
      });
      return isPresentInContract.every(function (c) {
        return c === false;
      });
    };

    console.log('itemPrice', itemPrice);
    console.log('isContractAmountValid', isContractAmountValid);
    console.log('isItemAlreadyInsured', isItemAlreadyInsured());

    var saveNewItem = function saveNewItem() {
      setItems(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [_objectSpread({
          contract: contract
        }, formData)]);
      });
      setContractItems(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, (0, _defineProperty2.default)({}, contract, {
          total: prev[contract].total + itemPrice,
          items: [].concat((0, _toConsumableArray2.default)(prev[contract].items), [formData.name])
        }));
      });
    };

    if (isContractAmountValid && isItemAlreadyInsured()) {
      saveNewItem();
      navigation.reset({
        index: 0,
        routes: [{
          name: 'ItemsList'
        }]
      });
    } else {
      _reactNative.Alert.alert('Cannot add this item', 'The item is already insured or too valuable');
    }
  }, [formData, params, setItems, navigation, contractItems, setContractItems]);
  return _react.default.createElement(_primitives.Box, {
    flex: 1,
    bg: "white"
  }, _react.default.createElement(_SafeView.default, null, _react.default.createElement(_NewItemHeader.default, {
    isFormValid: isFormValid,
    onSavePress: onSavePress
  }), _react.default.createElement(_reactNative.ScrollView, {
    showsVerticalScrollIndicator: false
  }, _react.default.createElement(_primitives.Box, {
    px: "large"
  }, _react.default.createElement(_primitives.Box, {
    alignItems: "center",
    pt: "xLarge"
  }, _react.default.createElement(_AssetUpload.default, {
    title: "Add Photo",
    type: "picture",
    uri: formData.mainPicture,
    onPictureAdd: setMainPicture
  })), _react.default.createElement(_ItemForm.default, {
    formData: formData,
    setName: setName,
    setPurchaseValue: setPurchaseValue,
    setDescription: setDescription
  }), _react.default.createElement(_ItemDocuments.default, {
    receiptUri: formData.receipt,
    additionalPictureUri: formData.additionalPicture,
    setReceipt: setReceipt,
    setAdditionalPicture: setAdditionalPicture
  })))));
};

var _default = NewItem;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,