2bb57bb7931f9de3fba2a1828afac9e2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireNativeViewManager = requireNativeViewManager;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);

function requireNativeViewManager(viewName) {
  if (__DEV__) {
    var NativeUnimoduleProxy = _reactNative.NativeModules.NativeUnimoduleProxy;

    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {
      var exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');
      console.warn("The native view manager required by name (" + viewName + ") from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [" + exportedViewManagerNames + "].");
    }
  }

  var reactNativeViewName = "ViewManagerAdapter_" + viewName;
  var ReactNativeComponent = (0, _reactNative.requireNativeComponent)(reactNativeViewName);
  var reactNativeUIConfiguration = (_reactNative.UIManager.getViewManagerConfig ? _reactNative.UIManager.getViewManagerConfig(reactNativeViewName) : _reactNative.UIManager[reactNativeViewName]) || {
    NativeProps: {},
    directEventTypes: {}
  };
  var reactNativeComponentPropNames = ['children'].concat((0, _toConsumableArray2.default)(ViewPropTypesKeys), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.NativeProps)), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.directEventTypes)));

  function NativeComponentAdapter(props, ref) {
    var nativeProps = (0, _pick.default)(props, reactNativeComponentPropNames);
    var proxiedProps = (0, _omit.default)(props, reactNativeComponentPropNames);
    return _react.default.createElement(ReactNativeComponent, (0, _extends2.default)({}, nativeProps, {
      proxiedProperties: proxiedProps,
      ref: ref
    }));
  }

  NativeComponentAdapter.displayName = "Adapter<" + viewName + ">";
  return _react.default.forwardRef(NativeComponentAdapter);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OYXRpdmVWaWV3TWFuYWdlckFkYXB0ZXIubmF0aXZlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQWNBLElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSwwQkFBWixDQUExQjs7QUFTTSxTQUFVLHdCQUFWLENBQTRDLFFBQTVDLEVBQTREO0FBQ2hFLE1BQUksT0FBSixFQUFhO0FBQUEsUUFDSCxvQkFERyxHQUNzQiwwQkFEdEIsQ0FDSCxvQkFERzs7QUFFWCxRQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQXJCLENBQXVDLFFBQXZDLENBQWdELFFBQWhELENBQUwsRUFBZ0U7QUFDOUQsVUFBTSx3QkFBd0IsR0FBRyxvQkFBb0IsQ0FBQyxpQkFBckIsQ0FBdUMsSUFBdkMsQ0FBNEMsSUFBNUMsQ0FBakM7QUFDQSxNQUFBLE9BQU8sQ0FBQyxJQUFSLGdEQUMrQyxRQUQvQyxrS0FDb04sd0JBRHBOO0FBR0Q7QUFDRjs7QUFJRCxNQUFNLG1CQUFtQiwyQkFBeUIsUUFBbEQ7QUFDQSxNQUFNLG9CQUFvQixHQUFHLHlDQUMzQixtQkFEMkIsQ0FBN0I7QUFHQSxNQUFNLDBCQUEwQixHQUFHLENBQUMsdUJBQVUsb0JBQVYsR0FDaEMsdUJBQVUsb0JBQVYsQ0FBK0IsbUJBQS9CLENBRGdDLEdBRWhDLHVCQUFVLG1CQUFWLENBRitCLEtBRUk7QUFDckMsSUFBQSxXQUFXLEVBQUUsRUFEd0I7QUFFckMsSUFBQSxnQkFBZ0IsRUFBRTtBQUZtQixHQUZ2QztBQU1BLE1BQU0sNkJBQTZCLElBQ2pDLFVBRGlDLDBDQUU5QixpQkFGOEIsb0NBRzlCLE1BQU0sQ0FBQyxJQUFQLENBQVksMEJBQTBCLENBQUMsV0FBdkMsQ0FIOEIsb0NBSTlCLE1BQU0sQ0FBQyxJQUFQLENBQVksMEJBQTBCLENBQUMsZ0JBQXZDLENBSjhCLEVBQW5DOztBQVFBLFdBQVMsc0JBQVQsQ0FBZ0MsS0FBaEMsRUFBdUMsR0FBdkMsRUFBMEM7QUFHeEMsUUFBTSxXQUFXLEdBQUcsbUJBQUssS0FBTCxFQUFZLDZCQUFaLENBQXBCO0FBQ0EsUUFBTSxZQUFZLEdBQUcsbUJBQUssS0FBTCxFQUFZLDZCQUFaLENBQXJCO0FBQ0EsV0FBTyxlQUFBLGFBQUEsQ0FBQyxvQkFBRCxFQUFxQix1QkFBQSxFQUFBLEVBQUssV0FBTCxFQUFnQjtBQUFFLE1BQUEsaUJBQWlCLEVBQUUsWUFBckI7QUFBbUMsTUFBQSxHQUFHLEVBQUU7QUFBeEMsS0FBaEIsQ0FBckIsQ0FBUDtBQUNEOztBQUNELEVBQUEsc0JBQXNCLENBQUMsV0FBdkIsZ0JBQWdELFFBQWhEO0FBQ0EsU0FBTyxlQUFNLFVBQU4sQ0FBaUIsc0JBQWpCLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvbWl0IGZyb20gJ2xvZGFzaC9vbWl0JztcbmltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOYXRpdmVNb2R1bGVzLCBVSU1hbmFnZXIsIFZpZXdQcm9wVHlwZXMsIHJlcXVpcmVOYXRpdmVDb21wb25lbnQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4vLyBUbyBtYWtlIHRoZSB0cmFuc2l0aW9uIGZyb20gUmVhY3QgTmF0aXZlJ3MgYHJlcXVpcmVOYXRpdmVDb21wb25lbnRgIHRvIEV4cG8nc1xuLy8gYHJlcXVpcmVOYXRpdmVWaWV3TWFuYWdlcmAgYXMgZWFzeSBhcyBwb3NzaWJsZSwgYHJlcXVpcmVOYXRpdmVWaWV3TWFuYWdlcmAgaXMgYSBkcm9wLWluXG4vLyByZXBsYWNlbWVudCBmb3IgYHJlcXVpcmVOYXRpdmVDb21wb25lbnRgLlxuLy9cbi8vIEZvciBlYWNoIHZpZXcgbWFuYWdlciwgd2UgY3JlYXRlIGEgd3JhcHBlciBjb21wb25lbnQgdGhhdCBhY2NlcHRzIGFsbCBvZiB0aGUgcHJvcHMgYXZhaWxhYmxlIHRvXG4vLyB0aGUgYXV0aG9yIG9mIHRoZSB1bml2ZXJzYWwgbW9kdWxlLiBUaGlzIHdyYXBwZXIgY29tcG9uZW50IHNwbGl0cyB0aGUgcHJvcHMgaW50byB0d28gc2V0czogcHJvcHNcbi8vIHBhc3NlZCB0byBSZWFjdCBOYXRpdmUncyBWaWV3IChleDogc3R5bGUsIHRlc3RJRCkgYW5kIGN1c3RvbSB2aWV3IHByb3BzLCB3aGljaCBhcmUgcGFzc2VkIHRvIHRoZVxuLy8gYWRhcHRlciB2aWV3IGNvbXBvbmVudCBpbiBhIHByb3AgY2FsbGVkIGBwcm94aWVkUHJvcGVydGllc2AuXG5cbi8vIE5PVEU6IFJlYWN0IE5hdGl2ZSBpcyBtb3ZpbmcgYXdheSBmcm9tIHJ1bnRpbWUgUHJvcFR5cGVzIGFuZCBtYXkgcmVtb3ZlIFZpZXdQcm9wVHlwZXMsIGluIHdoaWNoXG4vLyBjYXNlIHdlIHdpbGwgbmVlZCBhbm90aGVyIHdheSB0byBzZXBhcmF0ZSBzdGFuZGFyZCBSZWFjdCBOYXRpdmUgdmlldyBwcm9wcyBmcm9tIG90aGVyIHByb3BzLFxuLy8gd2hpY2ggd2UgcHJveHkgdGhyb3VnaCB0aGUgYWRhcHRlclxuY29uc3QgVmlld1Byb3BUeXBlc0tleXMgPSBPYmplY3Qua2V5cyhWaWV3UHJvcFR5cGVzKTtcblxudHlwZSBOYXRpdmVFeHBvQ29tcG9uZW50UHJvcHMgPSB7XG4gIHByb3hpZWRQcm9wZXJ0aWVzOiBvYmplY3Q7XG59O1xuXG4vKipcbiAqIEEgZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgYHJlcXVpcmVOYXRpdmVDb21wb25lbnRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZU5hdGl2ZVZpZXdNYW5hZ2VyPFAgPSBhbnk+KHZpZXdOYW1lOiBzdHJpbmcpOiBSZWFjdC5Db21wb25lbnRUeXBlPFA+IHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb25zdCB7IE5hdGl2ZVVuaW1vZHVsZVByb3h5IH0gPSBOYXRpdmVNb2R1bGVzO1xuICAgIGlmICghTmF0aXZlVW5pbW9kdWxlUHJveHkudmlld01hbmFnZXJzTmFtZXMuaW5jbHVkZXModmlld05hbWUpKSB7XG4gICAgICBjb25zdCBleHBvcnRlZFZpZXdNYW5hZ2VyTmFtZXMgPSBOYXRpdmVVbmltb2R1bGVQcm94eS52aWV3TWFuYWdlcnNOYW1lcy5qb2luKCcsICcpO1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgVGhlIG5hdGl2ZSB2aWV3IG1hbmFnZXIgcmVxdWlyZWQgYnkgbmFtZSAoJHt2aWV3TmFtZX0pIGZyb20gTmF0aXZlVmlld01hbmFnZXJBZGFwdGVyIGlzbid0IGV4cG9ydGVkIGJ5IEB1bmltb2R1bGVzL3JlYWN0LW5hdGl2ZS1hZGFwdGVyLiBWaWV3cyBvZiB0aGlzIHR5cGUgbWF5IG5vdCByZW5kZXIgY29ycmVjdGx5LiBFeHBvcnRlZCB2aWV3IG1hbmFnZXJzOiBbJHtleHBvcnRlZFZpZXdNYW5hZ2VyTmFtZXN9XS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNldCB1cCB0aGUgUmVhY3QgTmF0aXZlIG5hdGl2ZSBjb21wb25lbnQsIHdoaWNoIGlzIGFuIGFkYXB0ZXIgdG8gdGhlIHVuaXZlcnNhbCBtb2R1bGUncyB2aWV3XG4gIC8vIG1hbmFnZXJcbiAgY29uc3QgcmVhY3ROYXRpdmVWaWV3TmFtZSA9IGBWaWV3TWFuYWdlckFkYXB0ZXJfJHt2aWV3TmFtZX1gO1xuICBjb25zdCBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmVOYXRpdmVDb21wb25lbnQ8TmF0aXZlRXhwb0NvbXBvbmVudFByb3BzPihcbiAgICByZWFjdE5hdGl2ZVZpZXdOYW1lXG4gICk7XG4gIGNvbnN0IHJlYWN0TmF0aXZlVUlDb25maWd1cmF0aW9uID0gKFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZ1xuICAgID8gVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKHJlYWN0TmF0aXZlVmlld05hbWUpXG4gICAgOiBVSU1hbmFnZXJbcmVhY3ROYXRpdmVWaWV3TmFtZV0pIHx8IHtcbiAgICBOYXRpdmVQcm9wczoge30sXG4gICAgZGlyZWN0RXZlbnRUeXBlczoge30sXG4gIH07XG4gIGNvbnN0IHJlYWN0TmF0aXZlQ29tcG9uZW50UHJvcE5hbWVzID0gW1xuICAgICdjaGlsZHJlbicsXG4gICAgLi4uVmlld1Byb3BUeXBlc0tleXMsXG4gICAgLi4uT2JqZWN0LmtleXMocmVhY3ROYXRpdmVVSUNvbmZpZ3VyYXRpb24uTmF0aXZlUHJvcHMpLFxuICAgIC4uLk9iamVjdC5rZXlzKHJlYWN0TmF0aXZlVUlDb25maWd1cmF0aW9uLmRpcmVjdEV2ZW50VHlwZXMpLFxuICBdO1xuXG4gIC8vIERlZmluZSBhIGNvbXBvbmVudCBmb3IgdW5pdmVyc2FsLW1vZHVsZSBhdXRob3JzIHRvIGFjY2VzcyB0aGVpciBuYXRpdmUgdmlldyBtYW5hZ2VyXG4gIGZ1bmN0aW9uIE5hdGl2ZUNvbXBvbmVudEFkYXB0ZXIocHJvcHMsIHJlZikge1xuICAgIC8vIFRPRE86IGBvbWl0YCBtYXkgaW5jdXIgYSBtZWFuaW5nZnVsIHBlcmZvcm1hbmNlIGNvc3QgYWNyb3NzIG1hbnkgbmF0aXZlIGNvbXBvbmVudHMgcmVuZGVyZWRcbiAgICAvLyBpbiB0aGUgc2FtZSB1cGRhdGUuIFByb2ZpbGUgdGhpcyBhbmQgd3JpdGUgb3V0IGEgcGFydGl0aW9uIGZ1bmN0aW9uIGlmIHRoaXMgaXMgYSBib3R0bGVuZWNrLlxuICAgIGNvbnN0IG5hdGl2ZVByb3BzID0gcGljayhwcm9wcywgcmVhY3ROYXRpdmVDb21wb25lbnRQcm9wTmFtZXMpO1xuICAgIGNvbnN0IHByb3hpZWRQcm9wcyA9IG9taXQocHJvcHMsIHJlYWN0TmF0aXZlQ29tcG9uZW50UHJvcE5hbWVzKTtcbiAgICByZXR1cm4gPFJlYWN0TmF0aXZlQ29tcG9uZW50IHsuLi5uYXRpdmVQcm9wc30gcHJveGllZFByb3BlcnRpZXM9e3Byb3hpZWRQcm9wc30gcmVmPXtyZWZ9IC8+O1xuICB9XG4gIE5hdGl2ZUNvbXBvbmVudEFkYXB0ZXIuZGlzcGxheU5hbWUgPSBgQWRhcHRlcjwke3ZpZXdOYW1lfT5gO1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZihOYXRpdmVDb21wb25lbnRBZGFwdGVyKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=