bbf0a8667193794d86f389272b73d61f
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("@testing-library/react-native");

var useForm = _interopRequireWildcard(require("../../components/ItemForm/hooks/useForm"));

var itemsContext = _interopRequireWildcard(require("../../contexts/itemsContext"));

var _utils = _interopRequireDefault(require("../../tests/utils"));

var _NewItem = _interopRequireDefault(require("./NewItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var setItems = jest.fn();
var setContractItems = jest.fn();
jest.spyOn(itemsContext, 'useItemsContext').mockImplementation(function () {
  return {
    items: [],
    contractItems: {
      paris: {
        total: 0,
        items: []
      },
      london: {
        total: 0,
        items: []
      }
    },
    setItems: setItems,
    setContractItems: setContractItems
  };
});
var formData = {
  name: '',
  purchaseValue: '',
  description: '',
  mainPicture: '',
  receipt: '',
  additionalPicture: ''
};
var isFormValid = false;
jest.spyOn(useForm, 'default').mockImplementation(function () {
  return {
    formData: formData,
    isFormValid: false,
    setName: jest.fn(),
    setPurchaseValue: jest.fn(),
    setDescription: jest.fn(),
    setMainPicture: jest.fn(),
    setReceipt: jest.fn(),
    setAdditionalPicture: jest.fn()
  };
});
describe('NewItem', function () {
  it('should not add an item on empty form', function () {
    var _render = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render.getByText;

    var saveButton = getByText('Save');
    expect(saveButton).toBeTruthy();

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
  it('should add an item on filled form', function () {
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: 'Test',
      purchaseValue: '100',
      mainPicture: '/pic',
      receipt: '/pic'
    });
    isFormValid = true;

    var _render2 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render2.getByText;

    var saveButton = getByText('Save');
    expect(saveButton).toBeTruthy();

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).toHaveBeenCalled();
    expect(setContractItems).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5ld0l0ZW0udGVzdC50c3giXSwibmFtZXMiOlsic2V0SXRlbXMiLCJqZXN0IiwiZm4iLCJzZXRDb250cmFjdEl0ZW1zIiwic3B5T24iLCJpdGVtc0NvbnRleHQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJpdGVtcyIsImNvbnRyYWN0SXRlbXMiLCJwYXJpcyIsInRvdGFsIiwibG9uZG9uIiwiZm9ybURhdGEiLCJuYW1lIiwicHVyY2hhc2VWYWx1ZSIsImRlc2NyaXB0aW9uIiwibWFpblBpY3R1cmUiLCJyZWNlaXB0IiwiYWRkaXRpb25hbFBpY3R1cmUiLCJpc0Zvcm1WYWxpZCIsInVzZUZvcm0iLCJzZXROYW1lIiwic2V0UHVyY2hhc2VWYWx1ZSIsInNldERlc2NyaXB0aW9uIiwic2V0TWFpblBpY3R1cmUiLCJzZXRSZWNlaXB0Iiwic2V0QWRkaXRpb25hbFBpY3R1cmUiLCJkZXNjcmliZSIsIml0IiwiZ2V0QnlUZXh0Iiwic2F2ZUJ1dHRvbiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7QUFJQSxJQUFNQSxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFqQjtBQUNBLElBQU1DLGdCQUFnQixHQUFHRixJQUFJLENBQUNDLEVBQUwsRUFBekI7QUFDQUQsSUFBSSxDQUFDRyxLQUFMLENBQVdDLFlBQVgsRUFBeUIsaUJBQXpCLEVBQTRDQyxrQkFBNUMsQ0FBK0Q7QUFBQSxTQUFPO0FBQ3BFQyxJQUFBQSxLQUFLLEVBQUUsRUFENkQ7QUFFcEVDLElBQUFBLGFBQWEsRUFBRTtBQUNiQyxNQUFBQSxLQUFLLEVBQUU7QUFDTEMsUUFBQUEsS0FBSyxFQUFFLENBREY7QUFFTEgsUUFBQUEsS0FBSyxFQUFFO0FBRkYsT0FETTtBQUtiSSxNQUFBQSxNQUFNLEVBQUU7QUFDTkQsUUFB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c0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcblxuaW1wb3J0ICogYXMgdXNlRm9ybSBmcm9tICcuLi8uLi9jb21wb25lbnRzL0l0ZW1Gb3JtL2hvb2tzL3VzZUZvcm0nO1xuaW1wb3J0IEl0ZW1zUHJvdmlkZXIsICogYXMgaXRlbXNDb250ZXh0IGZyb20gJy4uLy4uL2NvbnRleHRzL2l0ZW1zQ29udGV4dCc7XG5pbXBvcnQgcmVuZGVyIGZyb20gJy4uLy4uL3Rlc3RzL3V0aWxzJztcblxuaW1wb3J0IE5ld0l0ZW0gZnJvbSAnLi9OZXdJdGVtJztcblxuLyogKioqKiogKioqKiogIENvbnRleHRzIG1vY2tzICAqKioqKiAqKioqKiAqL1xuXG5jb25zdCBzZXRJdGVtcyA9IGplc3QuZm4oKTtcbmNvbnN0IHNldENvbnRyYWN0SXRlbXMgPSBqZXN0LmZuKCk7XG5qZXN0LnNweU9uKGl0ZW1zQ29udGV4dCwgJ3VzZUl0ZW1zQ29udGV4dCcpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICBpdGVtczogW10sXG4gIGNvbnRyYWN0SXRlbXM6IHtcbiAgICBwYXJpczoge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBpdGVtczogW10sXG4gICAgfSxcbiAgICBsb25kb246IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgaXRlbXM6IFtdLFxuICAgIH0sXG4gIH0sXG4gIHNldEl0ZW1zLFxuICBzZXRDb250cmFjdEl0ZW1zLFxufSkpO1xuXG5sZXQgZm9ybURhdGEgPSB7XG4gIG5hbWU6ICcnLFxuICBwdXJjaGFzZVZhbHVlOiAnJyxcbiAgZGVzY3JpcHRpb246ICcnLFxuICBtYWluUGljdHVyZTogJycsXG4gIHJlY2VpcHQ6ICcnLFxuICBhZGRpdGlvbmFsUGljdHVyZTogJycsXG59O1xubGV0IGlzRm9ybVZhbGlkID0gZmFsc2U7XG5qZXN0LnNweU9uKHVzZUZvcm0sICdkZWZhdWx0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gIGZvcm1EYXRhLFxuICBpc0Zvcm1WYWxpZDogZmFsc2UsXG4gIHNldE5hbWU6IGplc3QuZm4oKSxcbiAgc2V0UHVyY2hhc2VWYWx1ZTogamVzdC5mbigpLFxuICBzZXREZXNjcmlwdGlvbjogamVzdC5mbigpLFxuICBzZXRNYWluUGljdHVyZTogamVzdC5mbigpLFxuICBzZXRSZWNlaXB0OiBqZXN0LmZuKCksXG4gIHNldEFkZGl0aW9uYWxQaWN0dXJlOiBqZXN0LmZuKCksXG59KSk7XG5cbmRlc2NyaWJlKCdOZXdJdGVtJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG5vdCBhZGQgYW4gaXRlbSBvbiBlbXB0eSBmb3JtJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8SXRlbXNQcm92aWRlcj5cbiAgICAgICAgPE5ld0l0ZW0gLz5cbiAgICAgIDwvSXRlbXNQcm92aWRlcj4sXG4gICAgKTtcblxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBnZXRCeVRleHQoJ1NhdmUnKTtcbiAgICBleHBlY3Qoc2F2ZUJ1dHRvbikudG9CZVRydXRoeSgpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzYXZlQnV0dG9uKTtcblxuICAgIGV4cGVjdChzZXRJdGVtcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3Qoc2V0Q29udHJhY3RJdGVtcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBhZGQgYW4gaXRlbSBvbiBmaWxsZWQgZm9ybScsICgpID0+IHtcbiAgICBmb3JtRGF0YSA9IHtcbiAgICAgIC4uLmZvcm1EYXRhLFxuICAgICAgbmFtZTogJ1Rlc3QnLFxuICAgICAgcHVyY2hhc2VWYWx1ZTogJzEwMCcsXG4gICAgICBtYWluUGljdHVyZTogJy9waWMnLFxuICAgICAgcmVjZWlwdDogJy9waWMnLFxuICAgIH07XG4gICAgaXNGb3JtVmFsaWQgPSB0cnVlO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8SXRlbXNQcm92aWRlcj5cbiAgICAgICAgPE5ld0l0ZW0gLz5cbiAgICAgIDwvSXRlbXNQcm92aWRlcj4sXG4gICAgKTtcblxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBnZXRCeVRleHQoJ1NhdmUnKTtcbiAgICBleHBlY3Qoc2F2ZUJ1dHRvbikudG9CZVRydXRoeSgpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzYXZlQnV0dG9uKTtcblxuICAgIGV4cGVjdChzZXRJdGVtcykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChzZXRDb250cmFjdEl0ZW1zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXX0=