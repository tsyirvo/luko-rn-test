03636ea004e1e66ba5a7b65b5c01a31e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCameraPermissionsAsync = getCameraPermissionsAsync;
exports.getCameraRollPermissionsAsync = getCameraRollPermissionsAsync;
exports.getMediaLibraryPermissionsAsync = getMediaLibraryPermissionsAsync;
exports.requestCameraPermissionsAsync = requestCameraPermissionsAsync;
exports.requestCameraRollPermissionsAsync = requestCameraRollPermissionsAsync;
exports.requestMediaLibraryPermissionsAsync = requestMediaLibraryPermissionsAsync;
exports.getPendingResultAsync = getPendingResultAsync;
exports.launchCameraAsync = launchCameraAsync;
exports.launchImageLibraryAsync = launchImageLibraryAsync;
Object.defineProperty(exports, "PermissionStatus", {
  enumerable: true,
  get: function get() {
    return _unimodulesPermissionsInterface.PermissionStatus;
  }
});
Object.defineProperty(exports, "MediaTypeOptions", {
  enumerable: true,
  get: function get() {
    return _ImagePicker.MediaTypeOptions;
  }
});
Object.defineProperty(exports, "VideoExportPreset", {
  enumerable: true,
  get: function get() {
    return _ImagePicker.VideoExportPreset;
  }
});

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _core = require("@unimodules/core");

var _unimodulesPermissionsInterface = require("unimodules-permissions-interface");

var _ExponentImagePicker = _interopRequireDefault(require("./ExponentImagePicker"));

var _ImagePicker = require("./ImagePicker.types");

function validateOptions(options) {
  var aspect = options.aspect,
      quality = options.quality,
      videoMaxDuration = options.videoMaxDuration;

  if (aspect != null) {
    var _aspect = (0, _slicedToArray2.default)(aspect, 2),
        x = _aspect[0],
        y = _aspect[1];

    if (x <= 0 || y <= 0) {
      throw new _core.CodedError('ERR_INVALID_ARGUMENT', "Invalid aspect ratio values " + x + ":" + y + ". Provide positive numbers.");
    }
  }

  if (quality && (quality < 0 || quality > 1)) {
    throw new _core.CodedError('ERR_INVALID_ARGUMENT', "Invalid 'quality' value " + quality + ". Provide a value between 0 and 1.");
  }

  if (videoMaxDuration && videoMaxDuration < 0) {
    throw new _core.CodedError('ERR_INVALID_ARGUMENT', "Invalid 'videoMaxDuration' value " + videoMaxDuration + ". Provide a non-negative number.");
  }

  return options;
}

function getCameraPermissionsAsync() {
  return _regenerator.default.async(function getCameraPermissionsAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", _ExponentImagePicker.default.getCameraPermissionsAsync());

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

function getCameraRollPermissionsAsync() {
  return _regenerator.default.async(function getCameraRollPermissionsAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.warn('ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()');
          return _context2.abrupt("return", getMediaLibraryPermissionsAsync());

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
}

function getMediaLibraryPermissionsAsync() {
  var writeOnly,
      imagePickerMethod,
      _args3 = arguments;
  return _regenerator.default.async(function getMediaLibraryPermissionsAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          writeOnly = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;
          imagePickerMethod = typeof _ExponentImagePicker.default.getMediaLibaryPermissionsAsync === 'function' ? _ExponentImagePicker.default.getMediaLibaryPermissionsAsync : _ExponentImagePicker.default.getMediaLibraryPermissionsAsync;
          return _context3.abrupt("return", imagePickerMethod(writeOnly));

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

function requestCameraPermissionsAsync() {
  return _regenerator.default.async(function requestCameraPermissionsAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.abrupt("return", _ExponentImagePicker.default.requestCameraPermissionsAsync());

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, null, Promise);
}

function requestCameraRollPermissionsAsync() {
  return _regenerator.default.async(function requestCameraRollPermissionsAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          console.warn('ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()');
          return _context5.abrupt("return", requestMediaLibraryPermissionsAsync());

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, null, Promise);
}

function requestMediaLibraryPermissionsAsync() {
  var writeOnly,
      imagePickerMethod,
      _args6 = arguments;
  return _regenerator.default.async(function requestMediaLibraryPermissionsAsync$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          writeOnly = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;
          imagePickerMethod = typeof _ExponentImagePicker.default.requestMediaLibaryPermissionsAsync === 'function' ? _ExponentImagePicker.default.requestMediaLibaryPermissionsAsync : _ExponentImagePicker.default.requestMediaLibraryPermissionsAsync;
          return _context6.abrupt("return", imagePickerMethod(writeOnly));

        case 3:
        case "end":
          return _context6.stop();
      }
    }
  }, null, null, null, Promise);
}

function getPendingResultAsync() {
  return _regenerator.default.async(function getPendingResultAsync$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          if (!_ExponentImagePicker.default.getPendingResultAsync) {
            _context7.next = 2;
            break;
          }

          return _context7.abrupt("return", _ExponentImagePicker.default.getPendingResultAsync());

        case 2:
          return _context7.abrupt("return", []);

        case 3:
        case "end":
          return _context7.stop();
      }
    }
  }, null, null, null, Promise);
}

function launchCameraAsync() {
  var options,
      _args8 = arguments;
  return _regenerator.default.async(function launchCameraAsync$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};

          if (_ExponentImagePicker.default.launchCameraAsync) {
            _context8.next = 3;
            break;
          }

          throw new _core.UnavailabilityError('ImagePicker', 'launchCameraAsync');

        case 3:
          _context8.next = 5;
          return _regenerator.default.awrap(_ExponentImagePicker.default.launchCameraAsync(validateOptions(options)));

        case 5:
          return _context8.abrupt("return", _context8.sent);

        case 6:
        case "end":
          return _context8.stop();
      }
    }
  }, null, null, null, Promise);
}

function launchImageLibraryAsync(options) {
  return _regenerator.default.async(function launchImageLibraryAsync$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          if (_ExponentImagePicker.default.launchImageLibraryAsync) {
            _context9.next = 2;
            break;
          }

          throw new _core.UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');

        case 2:
          _context9.next = 4;
          return _regenerator.default.awrap(_ExponentImagePicker.default.launchImageLibraryAsync(options != null ? options : {}));

        case 4:
          return _context9.abrupt("return", _context9.sent);

        case 5:
        case "end":
          return _context9.stop();
      }
    }
  }, null, null, null, Promise);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,