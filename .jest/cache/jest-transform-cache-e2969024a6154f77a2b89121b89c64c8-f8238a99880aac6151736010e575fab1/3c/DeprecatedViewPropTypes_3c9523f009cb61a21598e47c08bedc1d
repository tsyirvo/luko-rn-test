19e265a261ad933e5fabf4de5dcb28b4
'use strict';

var DeprecatedEdgeInsetsPropType = require("./DeprecatedEdgeInsetsPropType");

var DeprecatedStyleSheetPropType = require("./DeprecatedStyleSheetPropType");

var DeprecatedViewStylePropTypes = require("./DeprecatedViewStylePropTypes");

var PropTypes = require('prop-types');

var _require = require("./DeprecatedViewAccessibility"),
    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles;

var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
module.exports = {
  accessible: PropTypes.bool,
  accessibilityLabel: PropTypes.node,
  accessibilityHint: PropTypes.string,
  accessibilityActions: PropTypes.arrayOf(PropTypes.string),
  accessibilityIgnoresInvertColors: PropTypes.bool,
  accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
  accessibilityState: PropTypes.object,
  accessibilityValue: PropTypes.object,
  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
  accessibilityViewIsModal: PropTypes.bool,
  accessibilityElementsHidden: PropTypes.bool,
  onAccessibilityAction: PropTypes.func,
  onAccessibilityTap: PropTypes.func,
  onMagicTap: PropTypes.func,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  onResponderGrant: PropTypes.func,
  onResponderMove: PropTypes.func,
  onResponderReject: PropTypes.func,
  onResponderRelease: PropTypes.func,
  onResponderTerminate: PropTypes.func,
  onResponderTerminationRequest: PropTypes.func,
  onStartShouldSetResponder: PropTypes.func,
  onStartShouldSetResponderCapture: PropTypes.func,
  onMoveShouldSetResponder: PropTypes.func,
  onMoveShouldSetResponderCapture: PropTypes.func,
  hitSlop: DeprecatedEdgeInsetsPropType,
  onLayout: PropTypes.func,
  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,
  removeClippedSubviews: PropTypes.bool,
  renderToHardwareTextureAndroid: PropTypes.bool,
  shouldRasterizeIOS: PropTypes.bool,
  collapsable: PropTypes.bool,
  needsOffscreenAlphaCompositing: PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,