7296f90d0e8546d48e527e1d15e0ef71
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _extends4 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getStateFromPath;

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

var queryString = _interopRequireWildcard(require("query-string"));

var _checkLegacyPathConfig = _interopRequireDefault(require("./checkLegacyPathConfig"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function getStateFromPath(path, options) {
  var _ref3;

  var _ref = (0, _checkLegacyPathConfig.default)(options),
      _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      legacy = _ref2[0],
      compatOptions = _ref2[1];

  var initialRoutes = [];

  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {
    initialRoutes.push({
      initialRouteName: compatOptions.initialRouteName,
      connectedRoutes: Object.keys(compatOptions.screens)
    });
  }

  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;
  var remaining = path.replace(/\/+/g, '/').replace(/^\//, '').replace(/\?.*$/, '');
  remaining = remaining.endsWith('/') ? remaining : "".concat(remaining, "/");

  if (screens === undefined) {
    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {
      var name = decodeURIComponent(segment);

      if (i === self.length - 1) {
        return {
          name: name,
          params: parseQueryParams(path)
        };
      }

      return {
        name: name
      };
    });

    if (routes.length) {
      return createNestedStateObject(routes, initialRoutes);
    }

    return undefined;
  }

  var configs = (_ref3 = []).concat.apply(_ref3, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {
    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes);
  }))).sort(function (a, b) {
    if (a.pattern === b.pattern) {
      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));
    }

    if (a.pattern.startsWith(b.pattern)) {
      return -1;
    }

    if (b.pattern.startsWith(a.pattern)) {
      return 1;
    }

    var aParts = a.pattern.split('/');
    var bParts = b.pattern.split('/');
    var aWildcardIndex = aParts.indexOf('*');
    var bWildcardIndex = bParts.indexOf('*');

    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {
      return -1;
    }

    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {
      return 1;
    }

    if (aWildcardIndex === bWildcardIndex) {
      return bParts.length - aParts.length;
    }

    return bWildcardIndex - aWildcardIndex;
  });

  configs.reduce(function (acc, config) {
    if (acc[config.pattern]) {
      var a = acc[config.pattern].routeNames;
      var b = config.routeNames;
      var intersects = a.length > b.length ? b.every(function (it, i) {
        return a[i] === it;
      }) : a.every(function (it, i) {
        return b[i] === it;
      });

      if (!intersects) {
        throw new Error("Found conflicting screens with the same pattern. The pattern '".concat(config.pattern, "' resolves to both '").concat(a.join(' > '), "' and '").concat(b.join(' > '), "'. Patterns must be unique and cannot resolve to more than one screen."));
      }
    }

    return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, config.pattern, config));
  }, {});

  if (remaining === '/') {
    var match = configs.find(function (config) {
      return config.path === '' && config.routeNames.every(function (name) {
        var _configs$find;

        return !((_configs$find = configs.find(function (c) {
          return c.screen === name;
        })) !== null && _configs$find !== void 0 && _configs$find.path);
      });
    });

    if (match) {
      return createNestedStateObject(match.routeNames.map(function (name, i, self) {
        if (i === self.length - 1) {
          return {
            name: name,
            params: parseQueryParams(path, match.parse)
          };
        }

        return {
          name: name
        };
      }), initialRoutes);
    }

    return undefined;
  }

  var result;
  var current;

  if (legacy === false) {
    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {
      return _objectSpread(_objectSpread({}, c), {}, {
        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined
      });
    })),
        _routes = _matchAgainstConfigs.routes,
        remainingPath = _matchAgainstConfigs.remainingPath;

    if (_routes !== undefined) {
      current = createNestedStateObject(_routes, initialRoutes);
      remaining = remainingPath;
      result = current;
    }
  } else {
    while (remaining) {
      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),
          _routes2 = _matchAgainstConfigs2.routes,
          _remainingPath = _matchAgainstConfigs2.remainingPath;

      remaining = _remainingPath;

      if (_routes2 === undefined) {
        var segments = remaining.split('/');
        _routes2 = [{
          name: decodeURIComponent(segments[0])
        }];
        segments.shift();
        remaining = segments.join('/');
      }

      var state = createNestedStateObject(_routes2, initialRoutes);

      if (current) {
        var _current2;

        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {
          var _current;

          current = current.routes[current.index || 0].state;
        }

        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;
      } else {
        result = state;
      }

      current = state;
    }
  }

  if (current == null || result == null) {
    return undefined;
  }

  var route = findFocusedRoute(current);
  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));

  if (params) {
    route.params = _objectSpread(_objectSpread({}, route.params), params);
  }

  return result;
}

var joinPaths = function joinPaths() {
  var _ref4;

  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {
    paths[_key] = arguments[_key];
  }

  return (_ref4 = []).concat.apply(_ref4, (0, _toConsumableArray2.default)(paths.map(function (p) {
    return p.split('/');
  }))).filter(Boolean).join('/');
};

var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {
  var routes;
  var remainingPath = remaining;

  var _loop = function _loop(config) {
    if (!config.regex) {
      return "continue";
    }

    var match = remainingPath.match(config.regex);

    if (match) {
      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {
        return p.startsWith(':');
      }).reduce(function (acc, p, i) {
        return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\//, '')));
      }, {});
      routes = config.routeNames.map(function (name) {
        var _config$path;

        var config = configs.find(function (c) {
          return c.screen === name;
        });
        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {
          return p.startsWith(':');
        }).reduce(function (acc, p) {
          var value = matchedParams[p];

          if (value) {
            var _config$parse;

            var key = p.replace(/^:/, '').replace(/\?$/, '');
            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;
          }

          return acc;
        }, {});

        if (params && Object.keys(params).length) {
          return {
            name: name,
            params: params
          };
        }

        return {
          name: name
        };
      });
      remainingPath = remainingPath.replace(match[1], '');
      return "break";
    }
  };

  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {
    var config = _step.value;

    var _config$pattern;

    var _ret = _loop(config);

    if (_ret === "continue") continue;
    if (_ret === "break") break;
  }

  return {
    routes: routes,
    remainingPath: remainingPath
  };
};

var createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {
  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var initials = arguments.length > 4 ? arguments[4] : undefined;
  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;
  var configs = [];
  routeNames.push(screen);
  var config = routeConfig[screen];

  if (typeof config === 'string') {
    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;
    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));
  } else if (typeof config === 'object') {
    var _pattern2;

    if (typeof config.path === 'string') {
      if (legacy) {
        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;
      } else {
        if (config.exact && config.path === undefined) {
          throw new Error("A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.");
        }

        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';
      }

      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));
    }

    if (config.screens) {
      if (config.initialRouteName) {
        initials.push({
          initialRouteName: config.initialRouteName,
          connectedRoutes: Object.keys(config.screens)
        });
      }

      Object.keys(config.screens).forEach(function (nestedConfig) {
        var _pattern;

        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);
        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));
      });
    }
  }

  routeNames.pop();
  return configs;
};

var createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {
  pattern = pattern.split('/').filter(Boolean).join('/');
  var regex = pattern ? new RegExp("^(".concat(pattern.split('/').map(function (it) {
    if (legacy && it === '*') {
      throw new Error("Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config");
    }

    if (it.startsWith(':')) {
      return "(([^/]+\\/)".concat(it.endsWith('?') ? '?' : '', ")");
    }

    return "".concat(it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it), "\\/");
  }).join(''), ")")) : undefined;
  return {
    screen: screen,
    regex: regex,
    pattern: pattern,
    path: path,
    routeNames: (0, _toConsumableArray2.default)(routeNames),
    parse: parse
  };
};

var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {
  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {
    var config = _step2.value;

    if (routeName === config.routeNames[config.routeNames.length - 1]) {
      return config.parse;
    }
  }

  return undefined;
};

var findInitialRoute = function findInitialRoute(routeName, initialRoutes) {
  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {
    var config = _step3.value;

    if (config.connectedRoutes.includes(routeName)) {
      return config.initialRouteName === routeName ? undefined : config.initialRouteName;
    }
  }

  return undefined;
};

var createStateObject = function createStateObject(initialRoute, route, isEmpty) {
  if (isEmpty) {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, route]
      };
    } else {
      return {
        routes: [route]
      };
    }
  } else {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, _objectSpread(_objectSpread({}, route), {}, {
          state: {
            routes: []
          }
        })]
      };
    } else {
      return {
        routes: [_objectSpread(_objectSpread({}, route), {}, {
          state: {
            routes: []
          }
        })]
      };
    }
  }
};

var createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {
  var state;
  var route = routes.shift();
  var initialRoute = findInitialRoute(route.name, initialRoutes);
  state = createStateObject(initialRoute, route, routes.length === 0);

  if (routes.length > 0) {
    var nestedState = state;

    while (route = routes.shift()) {
      initialRoute = findInitialRoute(route.name, initialRoutes);
      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;
      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);

      if (routes.length > 0) {
        nestedState = nestedState.routes[nestedStateIndex].state;
      }
    }
  }

  return state;
};

var findFocusedRoute = function findFocusedRoute(state) {
  var _current4;

  var current = state;

  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {
    var _current3;

    current = current.routes[current.index || 0].state;
  }

  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];
  return route;
};

var parseQueryParams = function parseQueryParams(path, parseConfig) {
  var query = path.split('?')[1];
  var params = queryString.parse(query);

  if (parseConfig) {
    Object.keys(params).forEach(function (name) {
      if (parseConfig[name] && typeof params[name] === 'string') {
        params[name] = parseConfig[name](params[name]);
      }
    });
  }

  return Object.keys(params).length ? params : undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,