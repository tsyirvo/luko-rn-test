35e26d5cde73a5282191d5a820f82e6b
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn(function () {
      return {
        navigate: jest.fn(),
        reset: jest.fn(),
        goBack: jest.fn()
      };
    }),
    useRoute: function useRoute() {
      return {
        params: {
          contract: 'paris'
        }
      };
    }
  };
});

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("@testing-library/react-native");

var useForm = _interopRequireWildcard(require("../../components/ItemForm/hooks/useForm"));

var itemsContext = _interopRequireWildcard(require("../../contexts/itemsContext"));

var _utils = _interopRequireDefault(require("../../tests/utils"));

var _NewItem = _interopRequireDefault(require("./NewItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

var setItems = jest.fn();
var setContractItems = jest.fn();
jest.spyOn(itemsContext, 'useItemsContext').mockImplementation(function () {
  return {
    items: [],
    contractItems: {
      paris: {
        total: 0,
        items: []
      },
      london: {
        total: 0,
        items: []
      }
    },
    setItems: setItems,
    setContractItems: setContractItems
  };
});
var formData = {
  name: '',
  purchaseValue: '',
  description: '',
  mainPicture: '',
  receipt: '',
  additionalPicture: ''
};
var isFormValid = false;
jest.spyOn(useForm, 'default').mockImplementation(function () {
  return {
    formData: formData,
    isFormValid: isFormValid,
    setName: jest.fn(),
    setPurchaseValue: jest.fn(),
    setDescription: jest.fn(),
    setMainPicture: jest.fn(),
    setReceipt: jest.fn(),
    setAdditionalPicture: jest.fn()
  };
});
describe('NewItem', function () {
  it('should not add an item on empty form', function () {
    var _render = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
  it('should add an item on filled form', function () {
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: 'Test',
      purchaseValue: '100',
      mainPicture: '/pic',
      receipt: '/pic'
    });
    isFormValid = true;

    var _render2 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render2.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).toHaveBeenCalledWith(function () {
      return [{
        contract: 'paris'
      }];
    });
    expect(setContractItems).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5ld0l0ZW0udGVzdC50c3giXSwibmFtZXMiOlsibW9jayIsInVzZU5hdmlnYXRpb24iLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsInJlc2V0IiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJjb250cmFjdCIsInNldEl0ZW1zIiwic2V0Q29udHJhY3RJdGVtcyIsInNweU9uIiwiaXRlbXNDb250ZXh0IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiaXRlbXMiLCJjb250cmFjdEl0ZW1zIiwicGFyaXMiLCJ0b3RhbCIsImxvbmRvbiIsImZvcm1EYXRhIiwibmFtZSIsInB1cmNoYXNlVmFsdWUiLCJkZXNjcmlwdGlvbiIsIm1haW5QaWN0dXJlIiwicmVjZWlwdCIsImFkZGl0aW9uYWxQaWN0dXJlIiwiaXNGb3JtVmFsaWQiLCJ1c2VGb3JtIiwic2V0TmFtZSIsInNldFB1cmNoYXNlVmFsdWUiLCJzZXREZXNjcmlwdGlvbiIsInNldE1haW5QaWN0dXJlIiwic2V0UmVjZWlwdCIsInNldEFkZGl0aW9uYWxQaWN0dXJlIiwiZGVzY3JpYmUiLCJpdCIsImdldEJ5VGV4dCIsInNhdmVCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsImV4cGVjdCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJtYXBwaW5ncyI6IkFBV0EsY0FBS0EsSUFBTCxDQUFVLDBCQUFWLEVBQXNDO0FBQUEsU0FBTztBQUMzQ0MsSUFBQUEsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUwsQ0FBUTtBQUFBLGFBQU87QUFDNUJDLFFBQUFBLFFBQVEsRUFBRUYsSUFBSSxDQUFDQyxFQUFMLEVBRGtCO0FBRTVCRSxRQUFBQSxLQUFLLEVBQUVILElBQUksQ0FBQ0MsRUFBTCxFQUZxQjtBQUc1QkcsUUFBQUEsTUFBTSxFQUFFSixJQUFJLENBQUNDLEVBQUw7QUFIb0IsT0FBUDtBQUFBLEtBQVIsQ0FENEI7QUFNM0NJLElBQUFBLFFBQVEsRUFBRTtBQUFB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V0FBVyxFQUFFLE1BSlA7QUFLTkMsTUFBQUEsT0FBTyxFQUFFO0FBTEgsTUFBUjtBQU9BRSxJQUFBQSxXQUFXLEdBQUcsSUFBZDs7QUFSNEMsbUJBVXRCLG9CQUNwQiw2QkFBQyxvQkFBRCxRQUNFLDZCQUFDLGdCQUFELE9BREYsQ0FEb0IsQ0FWc0I7QUFBQSxRQVVwQ1UsU0FWb0MsWUFVcENBLFNBVm9DOztBQWdCNUMsUUFBTUMsVUFBVSxHQUFHRCxTQUFTLENBQUMsTUFBRCxDQUE1Qjs7QUFDQUUsMkJBQVVDLEtBQVYsQ0FBZ0JGLFVBQWhCOztBQUVBRyxJQUFBQSxNQUFNLENBQUMvQixRQUFELENBQU4sQ0FBaUJrQyxvQkFBakIsQ0FBc0M7QUFBQSxhQUFNLENBQUM7QUFBRW5DLFFBQUFBLFFBQVEsRUFBRTtBQUFaLE9BQUQsQ0FBTjtBQUFBLEtBQXRDO0FBQ0FnQyxJQUFBQSxNQUFNLENBQUM5QixnQkFBRCxDQUFOLENBQXlCZ0MsZ0JBQXpCO0FBQ0QsR0FyQkMsQ0FBRjtBQXNCRCxDQXJDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcblxuaW1wb3J0ICogYXMgdXNlRm9ybSBmcm9tICcuLi8uLi9jb21wb25lbnRzL0l0ZW1Gb3JtL2hvb2tzL3VzZUZvcm0nO1xuaW1wb3J0IEl0ZW1zUHJvdmlkZXIsICogYXMgaXRlbXNDb250ZXh0IGZyb20gJy4uLy4uL2NvbnRleHRzL2l0ZW1zQ29udGV4dCc7XG5pbXBvcnQgcmVuZGVyIGZyb20gJy4uLy4uL3Rlc3RzL3V0aWxzJztcblxuaW1wb3J0IE5ld0l0ZW0gZnJvbSAnLi9OZXdJdGVtJztcblxuLyogKioqKiogKioqKiogIExpYnJhcnkgbW9ja3MgICoqKioqICoqKioqICovXG5cbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcbiAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigoKSA9PiAoe1xuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXG4gICAgcmVzZXQ6IGplc3QuZm4oKSxcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcbiAgfSkpLFxuICB1c2VSb3V0ZTogKCkgPT4gKHtcbiAgICBwYXJhbXM6IHtcbiAgICAgIGNvbnRyYWN0OiAncGFyaXMnLFxuICAgIH0sXG4gIH0pLFxufSkpO1xuXG4vKiAqKioqKiAqKioqKiAgQ29udGV4dHMgbW9ja3MgICoqKioqICoqKioqICovXG5cbmNvbnN0IHNldEl0ZW1zID0gamVzdC5mbigpO1xuY29uc3Qgc2V0Q29udHJhY3RJdGVtcyA9IGplc3QuZm4oKTtcbmplc3Quc3B5T24oaXRlbXNDb250ZXh0LCAndXNlSXRlbXNDb250ZXh0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gIGl0ZW1zOiBbXSxcbiAgY29udHJhY3RJdGVtczoge1xuICAgIHBhcmlzOiB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICB9LFxuICAgIGxvbmRvbjoge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBpdGVtczogW10sXG4gICAgfSxcbiAgfSxcbiAgc2V0SXRlbXMsXG4gIHNldENvbnRyYWN0SXRlbXMsXG59KSk7XG5cbmxldCBmb3JtRGF0YSA9IHtcbiAgbmFtZTogJycsXG4gIHB1cmNoYXNlVmFsdWU6ICcnLFxuICBkZXNjcmlwdGlvbjogJycsXG4gIG1haW5QaWN0dXJlOiAnJyxcbiAgcmVjZWlwdDogJycsXG4gIGFkZGl0aW9uYWxQaWN0dXJlOiAnJyxcbn07XG5sZXQgaXNGb3JtVmFsaWQgPSBmYWxzZTtcbmplc3Quc3B5T24odXNlRm9ybSwgJ2RlZmF1bHQnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgZm9ybURhdGEsXG4gIGlzRm9ybVZhbGlkLFxuICBzZXROYW1lOiBqZXN0LmZuKCksXG4gIHNldFB1cmNoYXNlVmFsdWU6IGplc3QuZm4oKSxcbiAgc2V0RGVzY3JpcHRpb246IGplc3QuZm4oKSxcbiAgc2V0TWFpblBpY3R1cmU6IGplc3QuZm4oKSxcbiAgc2V0UmVjZWlwdDogamVzdC5mbigpLFxuICBzZXRBZGRpdGlvbmFsUGljdHVyZTogamVzdC5mbigpLFxufSkpO1xuXG5kZXNjcmliZSgnTmV3SXRlbScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBub3QgYWRkIGFuIGl0ZW0gb24gZW1wdHkgZm9ybScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEl0ZW1zUHJvdmlkZXI+XG4gICAgICAgIDxOZXdJdGVtIC8+XG4gICAgICA8L0l0ZW1zUHJvdmlkZXI+LFxuICAgICk7XG5cbiAgICBjb25zdCBzYXZlQnV0dG9uID0gZ2V0QnlUZXh0KCdTYXZlJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHNhdmVCdXR0b24pO1xuXG4gICAgZXhwZWN0KHNldEl0ZW1zKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChzZXRDb250cmFjdEl0ZW1zKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGFkZCBhbiBpdGVtIG9uIGZpbGxlZCBmb3JtJywgKCkgPT4ge1xuICAgIGZvcm1EYXRhID0ge1xuICAgICAgLi4uZm9ybURhdGEsXG4gICAgICBuYW1lOiAnVGVzdCcsXG4gICAgICBwdXJjaGFzZVZhbHVlOiAnMTAwJyxcbiAgICAgIG1haW5QaWN0dXJlOiAnL3BpYycsXG4gICAgICByZWNlaXB0OiAnL3BpYycsXG4gICAgfTtcbiAgICBpc0Zvcm1WYWxpZCA9IHRydWU7XG5cbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEl0ZW1zUHJvdmlkZXI+XG4gICAgICAgIDxOZXdJdGVtIC8+XG4gICAgICA8L0l0ZW1zUHJvdmlkZXI+LFxuICAgICk7XG5cbiAgICBjb25zdCBzYXZlQnV0dG9uID0gZ2V0QnlUZXh0KCdTYXZlJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKHNhdmVCdXR0b24pO1xuXG4gICAgZXhwZWN0KHNldEl0ZW1zKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgoKSA9PiBbeyBjb250cmFjdDogJ3BhcmlzJyB9XSk7XG4gICAgZXhwZWN0KHNldENvbnRyYWN0SXRlbXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG59KTtcbiJdfQ==