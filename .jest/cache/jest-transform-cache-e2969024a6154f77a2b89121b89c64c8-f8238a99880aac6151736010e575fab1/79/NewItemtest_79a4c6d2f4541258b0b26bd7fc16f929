5adbae5fd733ed521152de7aac380ebb
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn(function () {
      return {
        navigate: jest.fn(),
        reset: jest.fn(),
        goBack: jest.fn()
      };
    }),
    useRoute: function useRoute() {
      return {
        params: {
          contract: 'paris'
        }
      };
    }
  };
});

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("@testing-library/react-native");

var useForm = _interopRequireWildcard(require("../../components/ItemForm/hooks/useForm"));

var itemsContext = _interopRequireWildcard(require("../../contexts/itemsContext"));

var _utils = _interopRequireDefault(require("../../tests/utils"));

var _NewItem = _interopRequireDefault(require("./NewItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

var setItems = jest.fn();
var setContractItems = jest.fn();
jest.spyOn(itemsContext, 'useItemsContext').mockImplementation(function () {
  return {
    items: [],
    contractItems: {
      paris: {
        total: 0,
        items: []
      },
      london: {
        total: 0,
        items: []
      }
    },
    setItems: setItems,
    setContractItems: setContractItems
  };
});
var formData = {
  name: '',
  purchaseValue: '',
  description: '',
  mainPicture: '',
  receipt: '',
  additionalPicture: ''
};
var isFormValid = false;
jest.spyOn(useForm, 'default').mockImplementation(function () {
  return {
    formData: formData,
    isFormValid: isFormValid,
    setName: jest.fn(),
    setPurchaseValue: jest.fn(),
    setDescription: jest.fn(),
    setMainPicture: jest.fn(),
    setReceipt: jest.fn(),
    setAdditionalPicture: jest.fn()
  };
});
describe('NewItem', function () {
  it('should not add an item on empty form', function () {
    var _render = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
  it('should add an item on filled form', function () {
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: 'Test',
      purchaseValue: '100',
      mainPicture: '/pic',
      receipt: '/pic'
    });
    isFormValid = true;

    var _render2 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render2.getByText;

    var saveButton = getByText('Save');

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).toHaveBeenCalledWith([{
      contract: 'paris'
    }]);
    expect(setContractItems).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5ld0l0ZW0udGVzdC50c3giXSwibmFtZXMiOlsibW9jayIsInVzZU5hdmlnYXRpb24iLCJqZXN0IiwiZm4iLCJuYXZpZ2F0ZSIsInJlc2V0IiwiZ29CYWNrIiwidXNlUm91dGUiLCJwYXJhbXMiLCJjb250cmFjdCIsInNldEl0ZW1zIiwic2V0Q29udHJhY3RJdGVtcyIsInNweU9uIiwiaXRlbXNDb250ZXh0IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiaXRlbXMiLCJjb250cmFjdEl0ZW1zIiwicGFyaXMiLCJ0b3RhbCIsImxvbmRvbiIsImZvcm1EYXRhIiwibmFtZSIsInB1cmNoYXNlVmFsdWUiLCJkZXNjcmlwdGlvbiIsIm1haW5QaWN0dXJlIiwicmVjZWlwdCIsImFkZGl0aW9uYWxQaWN0dXJlIiwiaXNGb3JtVmFsaWQiLCJ1c2VGb3JtIiwic2V0TmFtZSIsInNldFB1cmNoYXNlVmFsdWUiLCJzZXREZXNjcmlwdGlvbiIsInNldE1haW5QaWN0dXJlIiwic2V0UmVjZWlwdCIsInNldEFkZGl0aW9uYWxQaWN0dXJlIiwiZGVzY3JpYmUiLCJpdCIsImdldEJ5VGV4dCIsInNhdmVCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsImV4cGVjdCIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJtYXBwaW5ncyI6IkFBV0EsY0FBS0EsSUFBTCxDQUFVLDBCQUFWLEVBQXNDO0FBQUEsU0FBTztBQUMzQ0MsSUFBQUEsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUwsQ0FBUTtBQUFBLGFBQU87QUFDNUJDLFFBQUFBLFFBQVEsRUFBRUYsSUFBSSxDQUFDQyxFQUFMLEVBRGtCO0FBRTVCRSxRQUFBQSxLQUFLLEVBQUVILElBQUksQ0FBQ0MsRUFBTCxFQUZxQjtBQUc1QkcsUUFBQUEsTUFBTSxFQUFFSixJQUFJLENBQUNDLEVBQUw7QUFIb0IsT0FBUDtBQUFBLEtBQVIsQ0FENEI7QUFNM0NJLElBQUFBLFFBQVEsRUFBRTtBQUFB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V0FBVyxFQUFFLE1BSlA7QUFLTkMsTUFBQUEsT0FBTyxFQUFFO0FBTEgsTUFBUjtBQU9BRSxJQUFBQSxXQUFXLEdBQUcsSUFBZDs7QUFSNEMsbUJBVXRCLG9CQUNwQiw2QkFBQyxvQkFBRCxRQUNFLDZCQUFDLGdCQUFELE9BREYsQ0FEb0IsQ0FWc0I7QUFBQSxRQVVwQ1UsU0FWb0MsWUFVcENBLFNBVm9DOztBQWdCNUMsUUFBTUMsVUFBVSxHQUFHRCxTQUFTLENBQUMsTUFBRCxDQUE1Qjs7QUFDQUUsMkJBQVVDLEtBQVYsQ0FBZ0JGLFVBQWhCOztBQUVBRyxJQUFBQSxNQUFNLENBQUMvQixRQUFELENBQU4sQ0FBaUJrQyxvQkFBakIsQ0FBc0MsQ0FBQztBQUFFbkMsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FBRCxDQUF0QztBQUNBZ0MsSUFBQUEsTUFBTSxDQUFDOUIsZ0JBQUQsQ0FBTixDQUF5QmdDLGdCQUF6QjtBQUNELEdBckJDLENBQUY7QUFzQkQsQ0FyQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCAqIGFzIHVzZUZvcm0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9JdGVtRm9ybS9ob29rcy91c2VGb3JtJztcbmltcG9ydCBJdGVtc1Byb3ZpZGVyLCAqIGFzIGl0ZW1zQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0cy9pdGVtc0NvbnRleHQnO1xuaW1wb3J0IHJlbmRlciBmcm9tICcuLi8uLi90ZXN0cy91dGlscyc7XG5cbmltcG9ydCBOZXdJdGVtIGZyb20gJy4vTmV3SXRlbSc7XG5cbi8qICoqKioqICoqKioqICBMaWJyYXJ5IG1vY2tzICAqKioqKiAqKioqKiAqL1xuXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XG4gIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKCkgPT4gKHtcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxuICAgIHJlc2V0OiBqZXN0LmZuKCksXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXG4gIH0pKSxcbiAgdXNlUm91dGU6ICgpID0+ICh7XG4gICAgcGFyYW1zOiB7XG4gICAgICBjb250cmFjdDogJ3BhcmlzJyxcbiAgICB9LFxuICB9KSxcbn0pKTtcblxuLyogKioqKiogKioqKiogIENvbnRleHRzIG1vY2tzICAqKioqKiAqKioqKiAqL1xuXG5jb25zdCBzZXRJdGVtcyA9IGplc3QuZm4oKTtcbmNvbnN0IHNldENvbnRyYWN0SXRlbXMgPSBqZXN0LmZuKCk7XG5qZXN0LnNweU9uKGl0ZW1zQ29udGV4dCwgJ3VzZUl0ZW1zQ29udGV4dCcpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICBpdGVtczogW10sXG4gIGNvbnRyYWN0SXRlbXM6IHtcbiAgICBwYXJpczoge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBpdGVtczogW10sXG4gICAgfSxcbiAgICBsb25kb246IHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgaXRlbXM6IFtdLFxuICAgIH0sXG4gIH0sXG4gIHNldEl0ZW1zLFxuICBzZXRDb250cmFjdEl0ZW1zLFxufSkpO1xuXG5sZXQgZm9ybURhdGEgPSB7XG4gIG5hbWU6ICcnLFxuICBwdXJjaGFzZVZhbHVlOiAnJyxcbiAgZGVzY3JpcHRpb246ICcnLFxuICBtYWluUGljdHVyZTogJycsXG4gIHJlY2VpcHQ6ICcnLFxuICBhZGRpdGlvbmFsUGljdHVyZTogJycsXG59O1xubGV0IGlzRm9ybVZhbGlkID0gZmFsc2U7XG5qZXN0LnNweU9uKHVzZUZvcm0sICdkZWZhdWx0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gIGZvcm1EYXRhLFxuICBpc0Zvcm1WYWxpZCxcbiAgc2V0TmFtZTogamVzdC5mbigpLFxuICBzZXRQdXJjaGFzZVZhbHVlOiBqZXN0LmZuKCksXG4gIHNldERlc2NyaXB0aW9uOiBqZXN0LmZuKCksXG4gIHNldE1haW5QaWN0dXJlOiBqZXN0LmZuKCksXG4gIHNldFJlY2VpcHQ6IGplc3QuZm4oKSxcbiAgc2V0QWRkaXRpb25hbFBpY3R1cmU6IGplc3QuZm4oKSxcbn0pKTtcblxuZGVzY3JpYmUoJ05ld0l0ZW0nLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgbm90IGFkZCBhbiBpdGVtIG9uIGVtcHR5IGZvcm0nLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxJdGVtc1Byb3ZpZGVyPlxuICAgICAgICA8TmV3SXRlbSAvPlxuICAgICAgPC9JdGVtc1Byb3ZpZGVyPixcbiAgICApO1xuXG4gICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IGdldEJ5VGV4dCgnU2F2ZScpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzYXZlQnV0dG9uKTtcblxuICAgIGV4cGVjdChzZXRJdGVtcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3Qoc2V0Q29udHJhY3RJdGVtcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBhZGQgYW4gaXRlbSBvbiBmaWxsZWQgZm9ybScsICgpID0+IHtcbiAgICBmb3JtRGF0YSA9IHtcbiAgICAgIC4uLmZvcm1EYXRhLFxuICAgICAgbmFtZTogJ1Rlc3QnLFxuICAgICAgcHVyY2hhc2VWYWx1ZTogJzEwMCcsXG4gICAgICBtYWluUGljdHVyZTogJy9waWMnLFxuICAgICAgcmVjZWlwdDogJy9waWMnLFxuICAgIH07XG4gICAgaXNGb3JtVmFsaWQgPSB0cnVlO1xuXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxJdGVtc1Byb3ZpZGVyPlxuICAgICAgICA8TmV3SXRlbSAvPlxuICAgICAgPC9JdGVtc1Byb3ZpZGVyPixcbiAgICApO1xuXG4gICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IGdldEJ5VGV4dCgnU2F2ZScpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzYXZlQnV0dG9uKTtcblxuICAgIGV4cGVjdChzZXRJdGVtcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoW3sgY29udHJhY3Q6ICdwYXJpcycgfV0pO1xuICAgIGV4cGVjdChzZXRDb250cmFjdEl0ZW1zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXX0=