947f6bef2d613c7e09330d396b65f7e9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nonSecure = require("nanoid/non-secure");

var BaseRouter = {
  getStateForAction: function getStateForAction(state, action) {
    switch (action.type) {
      case 'SET_PARAMS':
        {
          var index = action.source ? state.routes.findIndex(function (r) {
            return r.key === action.source;
          }) : state.index;

          if (index === -1) {
            return null;
          }

          return _objectSpread(_objectSpread({}, state), {}, {
            routes: state.routes.map(function (r, i) {
              return i === index ? _objectSpread(_objectSpread({}, r), {}, {
                params: _objectSpread(_objectSpread({}, r.params), action.payload.params)
              }) : r;
            })
          });
        }

      case 'RESET':
        {
          var nextState = action.payload;

          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {
            return !state.routeNames.includes(route.name);
          })) {
            return null;
          }

          if (nextState.stale === false) {
            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {
              return !state.routeNames.includes(name);
            })) {
              return null;
            }

            return _objectSpread(_objectSpread({}, nextState), {}, {
              routes: nextState.routes.map(function (route) {
                return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {
                  key: "".concat(route.name, "-").concat((0, _nonSecure.nanoid)())
                });
              })
            });
          }

          return nextState;
        }

      default:
        return null;
    }
  },
  shouldActionChangeFocus: function shouldActionChangeFocus(action) {
    return action.type === 'NAVIGATE';
  }
};
var _default = BaseRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhc2VSb3V0ZXIudHN4Il0sIm5hbWVzIjpbIkJhc2VSb3V0ZXIiLCJnZXRTdGF0ZUZvckFjdGlvbiIsImFjdGlvbiIsImluZGV4Iiwic3RhdGUiLCJyIiwicm91dGVzIiwicGFyYW1zIiwibmV4dFN0YXRlIiwicm91dGUiLCJuYW1lIiwia2V5Iiwic2hvdWxkQWN0aW9uQ2hhbmdlRm9jdXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBOztBQVdBLElBQU1BLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsaUJBRGlCLDZCQUNBLEtBREEsRUFDQSxNQURBLEVBSXFCO0FBQ3BDLFlBQVFDLE1BQU0sQ0FBZCxJQUFBO0FBQ0UsV0FBQSxZQUFBO0FBQW1CO0FBQ2pCLGNBQU1DLEtBQUssR0FBR0QsTUFBTSxDQUFOQSxNQUFBQSxHQUNWRSxLQUFLLENBQUxBLE1BQUFBLENBQUFBLFNBQUFBLENBQXdCQyxVQUFBQSxDQUFEO0FBQUEsbUJBQU9BLENBQUMsQ0FBREEsR0FBQUEsS0FBVUgsTUFBTSxDQURwQ0EsTUFDYTtBQUFBLFdBQXZCRSxDQURVRixHQUVWRSxLQUFLLENBRlQsS0FBQTs7QUFJQSxjQUFJRCxLQUFLLEtBQUssQ0FBZCxDQUFBLEVBQWtCO0FBQ2hCLG1CQUFBLElBQUE7QUFDRDs7QUFFRCxpREFBTyxLQUFQO0FBRUVHLFlBQUFBLE1BQU0sRUFBRSxLQUFLLENBQUwsTUFBQSxDQUFBLEdBQUEsQ0FBaUIsVUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLHFCQUN2QixDQUFDLEtBQUQsS0FBQSxtQ0FDSSxDQURKO0FBQ1lDLGdCQUFBQSxNQUFNLGtDQUFPRixDQUFDLENBQU4sTUFBRixHQUFvQkgsTUFBTSxDQUFOQSxPQUFBQSxDQUFlSyxNQUFuQztBQURsQixtQkFETSxDQUFpQjtBQUFBLGFBQWpCO0FBRlY7QUFRRDs7QUFFRCxXQUFBLE9BQUE7QUFBYztBQUNaLGNBQU1DLFNBQVMsR0FBR04sTUFBTSxDQUF4QixPQUFBOztBQUVBLGNBQ0VNLFNBQVMsQ0FBVEEsTUFBQUEsQ0FBQUEsTUFBQUEsS0FBQUEsQ0FBQUEsSUFDQUEsU0FBUyxDQUFUQSxNQUFBQSxDQUFBQSxJQUFBQSxDQUNHQyxVQUFBQSxLQUFEO0FBQUEsbUJBQTZCLENBQUNMLEtBQUssQ0FBTEEsVUFBQUEsQ0FBQUEsUUFBQUEsQ0FBMEJLLEtBQUssQ0FIakUsSUFHa0NMLENBQTlCO0FBQUEsV0FERkksQ0FGRixFQUtFO0FBQ0EsbUJBQUEsSUFBQTtBQUNEOztBQUVELGNBQUlBLFNBQVMsQ0FBVEEsS0FBQUEsS0FBSixLQUFBLEVBQStCO0FBQzdCLGdCQUNFSixLQUFLLENBQUxBLFVBQUFBLENBQUFBLE1BQUFBLEtBQTRCSSxTQUFTLENBQVRBLFVBQUFBLENBQTVCSixNQUFBQSxJQUNBSSxTQUFTLENBQVRBLFVBQUFBLENBQUFBLElBQUFBLENBQ0dFLFVBQUFBLElBQUQ7QUFBQSxxQkFBVSxDQUFDTixLQUFLLENBQUxBLFVBQUFBLENBQUFBLFFBQUFBLENBSGYsSUFHZUEsQ0FBWDtBQUFBLGFBREZJLENBRkYsRUFLRTtBQUNBLHFCQUFBLElBQUE7QUFDRDs7QUFFRCxtREFBTyxTQUFQO0FBRUVGLGNBQUFBLE1BQU0sRUFBRSxTQUFTLENBQVQsTUFBQSxDQUFBLEdBQUEsQ0FBc0JHLFVBQUFBLEtBQUQ7QUFBQSx1QkFDM0JBLEtBQUssQ0FBTEEsR0FBQUEsR0FBQUEsS0FBQUEsbUNBQW9CLEtBQXBCQTtBQUFnQ0Usa0JBQUFBLEdBQUcsRUFBQSxHQUFBLE1BQUEsQ0FBS0YsS0FBSyxDQUFWLElBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxDQUFtQixDQUFBLEdBQUEsVUFBQSxDQUFuQixNQUFtQixHQUFuQjtBQUFuQ0Esa0JBRDJCO0FBQUEsZUFBckI7QUFGVjtBQU1EOztBQUVELGlCQUFBLFNBQUE7QUFDRDs7QUFFRDtBQUNFLGVBQUEsSUFBQTtBQXRESjtBQUxlLEdBQUE7QUErRGpCRyxFQUFBQSx1QkEvRGlCLG1DQStETSxNQS9ETixFQStEdUM7QUFDdEQsV0FBT1YsTUFBTSxDQUFOQSxJQUFBQSxLQUFQLFVBQUE7QUFDRDtBQWpFZ0IsQ0FBbkI7ZUFvRWVGLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQvbm9uLXNlY3VyZSc7XG5pbXBvcnQgdHlwZSB7XG4gIENvbW1vbk5hdmlnYXRpb25BY3Rpb24sXG4gIE5hdmlnYXRpb25TdGF0ZSxcbiAgUGFydGlhbFN0YXRlLFxufSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBCYXNlIHJvdXRlciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIHdyaXRpbmcgY3VzdG9tIHJvdXRlcnMuXG4gKiBUaGlzIHByb3ZpZGVzIGZldyBoZWxwZXIgbWV0aG9kcyB0byBoYW5kbGUgY29tbW9uIGFjdGlvbnMgc3VjaCBhcyBgUkVTRVRgLlxuICovXG5jb25zdCBCYXNlUm91dGVyID0ge1xuICBnZXRTdGF0ZUZvckFjdGlvbjxTdGF0ZSBleHRlbmRzIE5hdmlnYXRpb25TdGF0ZT4oXG4gICAgc3RhdGU6IFN0YXRlLFxuICAgIGFjdGlvbjogQ29tbW9uTmF2aWdhdGlvbkFjdGlvblxuICApOiBTdGF0ZSB8IFBhcnRpYWxTdGF0ZTxTdGF0ZT4gfCBudWxsIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdTRVRfUEFSQU1TJzoge1xuICAgICAgICBjb25zdCBpbmRleCA9IGFjdGlvbi5zb3VyY2VcbiAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoKHIpID0+IHIua2V5ID09PSBhY3Rpb24uc291cmNlKVxuICAgICAgICAgIDogc3RhdGUuaW5kZXg7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICByb3V0ZXM6IHN0YXRlLnJvdXRlcy5tYXAoKHIsIGkpID0+XG4gICAgICAgICAgICBpID09PSBpbmRleFxuICAgICAgICAgICAgICA/IHsgLi4uciwgcGFyYW1zOiB7IC4uLnIucGFyYW1zLCAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMgfSB9XG4gICAgICAgICAgICAgIDogclxuICAgICAgICAgICksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ1JFU0VUJzoge1xuICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSBhY3Rpb24ucGF5bG9hZCBhcyBTdGF0ZSB8IFBhcnRpYWxTdGF0ZTxTdGF0ZT47XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5leHRTdGF0ZS5yb3V0ZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAgICAgbmV4dFN0YXRlLnJvdXRlcy5zb21lKFxuICAgICAgICAgICAgKHJvdXRlOiB7IG5hbWU6IHN0cmluZyB9KSA9PiAhc3RhdGUucm91dGVOYW1lcy5pbmNsdWRlcyhyb3V0ZS5uYW1lKVxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFN0YXRlLnN0YWxlID09PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN0YXRlLnJvdXRlTmFtZXMubGVuZ3RoICE9PSBuZXh0U3RhdGUucm91dGVOYW1lcy5sZW5ndGggfHxcbiAgICAgICAgICAgIG5leHRTdGF0ZS5yb3V0ZU5hbWVzLnNvbWUoXG4gICAgICAgICAgICAgIChuYW1lKSA9PiAhc3RhdGUucm91dGVOYW1lcy5pbmNsdWRlcyhuYW1lKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLm5leHRTdGF0ZSxcbiAgICAgICAgICAgIHJvdXRlczogbmV4dFN0YXRlLnJvdXRlcy5tYXAoKHJvdXRlKSA9PlxuICAgICAgICAgICAgICByb3V0ZS5rZXkgPyByb3V0ZSA6IHsgLi4ucm91dGUsIGtleTogYCR7cm91dGUubmFtZX0tJHtuYW5vaWQoKX1gIH1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBzaG91bGRBY3Rpb25DaGFuZ2VGb2N1cyhhY3Rpb246IENvbW1vbk5hdmlnYXRpb25BY3Rpb24pIHtcbiAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdOQVZJR0FURSc7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlUm91dGVyO1xuIl19