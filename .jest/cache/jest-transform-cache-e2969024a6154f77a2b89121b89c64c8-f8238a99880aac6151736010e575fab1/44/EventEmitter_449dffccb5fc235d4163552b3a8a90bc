3b973cdf790609ec57d46a0c74e0076c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventEmitter = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _invariant = _interopRequireDefault(require("invariant"));

var _reactNative = require("react-native");

var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';

var EventEmitter = function () {
  function EventEmitter(nativeModule) {
    (0, _classCallCheck2.default)(this, EventEmitter);
    this._listenerCount = 0;
    this._nativeModule = nativeModule;
    this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
  }

  (0, _createClass2.default)(EventEmitter, [{
    key: "addListener",
    value: function addListener(eventName, listener) {
      var _this = this,
          _subscription;

      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.startObserving) {
        this._nativeModule.startObserving();
      }

      this._listenerCount++;

      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);

      var subscription = (_subscription = {}, (0, _defineProperty2.default)(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), (0, _defineProperty2.default)(_subscription, "remove", function remove() {
        _this.removeSubscription(subscription);
      }), _subscription);
      return subscription;
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventName) {
      var removedListenerCount = this._eventEmitter.listeners(eventName).length;

      this._eventEmitter.removeAllListeners(eventName);

      this._listenerCount -= removedListenerCount;
      (0, _invariant.default)(this._listenerCount >= 0, "EventEmitter must have a non-negative number of listeners");

      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];

      if (!nativeEmitterSubscription) {
        return;
      }

      this._eventEmitter.removeSubscription(nativeEmitterSubscription);

      this._listenerCount--;
      delete subscription[nativeEmitterSubscriptionKey];

      subscription.remove = function () {};

      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    }
  }, {
    key: "emit",
    value: function emit(eventName) {
      var _this$_eventEmitter;

      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));
    }
  }]);
  return EventEmitter;
}();

exports.EventEmitter = EventEmitter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FdmVudEVtaXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQU0sNEJBQTRCLEdBQUcsK0JBQXJDOztJQWFhLFk7QUFLWCx3QkFBWSxZQUFaLEVBQXNDO0FBQUE7QUFKdEMsU0FBQSxjQUFBLEdBQWlCLENBQWpCO0FBS0UsU0FBSyxhQUFMLEdBQXFCLFlBQXJCO0FBQ0EsU0FBSyxhQUFMLEdBQXFCLElBQUksK0JBQUosQ0FBdUIsWUFBdkIsQ0FBckI7QUFDRDs7OztnQ0FFYyxTLEVBQW1CLFEsRUFBNEI7QUFBQTtBQUFBOztBQUM1RCxVQUFJLENBQUMsS0FBSyxjQUFOLElBQXdCLHNCQUFTLEVBQVQsS0FBZ0IsS0FBeEMsSUFBaUQsS0FBSyxhQUFMLENBQW1CLGNBQXhFLEVBQXdGO0FBQ3RGLGFBQUssYUFBTCxDQUFtQixjQUFuQjtBQUNEOztBQUVELFdBQUssY0FBTDs7QUFDQSxVQUFNLHlCQUF5QixHQUFHLEtBQUssYUFBTCxDQUFtQixXQUFuQixDQUErQixTQUEvQixFQUEwQyxRQUExQyxDQUFsQzs7QUFDQSxVQUFNLFlBQVkscUVBQ2YsNEJBRGUsRUFDZ0IseUJBRGhCLDBEQUVSLGtCQUFLO0FBQ1gsUUFBQSxLQUFJLENBQUMsa0JBQUwsQ0FBd0IsWUFBeEI7QUFDRCxPQUplLGlCQUFsQjtBQU1BLGFBQU8sWUFBUDtBQUNEOzs7dUNBRWtCLFMsRUFBaUI7QUFDbEMsVUFBTSxvQkFBb0IsR0FBRyxLQUFLLGFBQUwsQ0FBbUIsU0FBbkIsQ0FBNkIsU0FBN0IsRUFBd0MsTUFBckU7O0FBQ0EsV0FBSyxhQUFMLENBQW1CLGtCQUFuQixDQUFzQyxTQUF0Qzs7QUFDQSxXQUFLLGNBQUwsSUFBdUIsb0JBQXZCO0FBQ0EsOEJBQ0UsS0FBSyxjQUFMLElBQXVCLENBRHpCOztBQUtBLFVBQUksQ0FBQyxLQUFLLGNBQU4sSUFBd0Isc0JBQVMsRUFBVCxLQUFnQixLQUF4QyxJQUFpRCxLQUFLLGFBQUwsQ0FBbUIsYUFBeEUsRUFBdUY7QUFDckYsYUFBSyxhQUFMLENBQW1CLGFBQW5CO0FBQ0Q7QUFDRjs7O3VDQUVrQixZLEVBQTBCO0FBQzNDLFVBQU0seUJBQXlCLEdBQUcsWUFBWSxDQUFDLDRCQUFELENBQTlDOztBQUNBLFVBQUksQ0FBQyx5QkFBTCxFQUFnQztBQUM5QjtBQUNEOztBQUVELFdBQUssYUFBTCxDQUFtQixrQkFBbkIsQ0FBc0MseUJBQXRDOztBQUNBLFdBQUssY0FBTDtBQUlBLGFBQU8sWUFBWSxDQUFDLDRCQUFELENBQW5COztBQUdBLE1BQUEsWUFBWSxDQUFDLE1BQWIsR0FBc0IsWUFBSyxDQUFHLENBQTlCOztBQUVBLFVBQUksQ0FBQyxLQUFLLGNBQU4sSUFBd0Isc0JBQVMsRUFBVCxLQUFnQixLQUF4QyxJQUFpRCxLQUFLLGFBQUwsQ0FBbUIsYUFBeEUsRUFBdUY7QUFDckYsYUFBSyxhQUFMLENBQW1CLGFBQW5CO0FBQ0Q7QUFDRjs7O3lCQUVJLFMsRUFBbUM7QUFBQTs7QUFBQSx3Q0FBYixNQUFhO0FBQWIsUUFBQSxNQUFhO0FBQUE7O0FBQ3RDLGtDQUFLLGFBQUwsRUFBbUIsSUFBbkIsNkJBQXdCLFNBQXhCLFNBQXNDLE1BQXRDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBOYXRpdmVFdmVudEVtaXR0ZXIsIFBsYXRmb3JtIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuY29uc3QgbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbktleSA9ICdAQG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb25AQCc7XG5cbnR5cGUgTmF0aXZlTW9kdWxlID0ge1xuICBzdGFydE9ic2VydmluZz86ICgpID0+IHZvaWQ7XG4gIHN0b3BPYnNlcnZpbmc/OiAoKSA9PiB2b2lkO1xuICBhZGRMaXN0ZW5lcjogKGV2ZW50TmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICByZW1vdmVMaXN0ZW5lcnM6IChjb3VudDogbnVtYmVyKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uID0ge1xuICByZW1vdmU6ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY2xhc3MgRXZlbnRFbWl0dGVyIHtcbiAgX2xpc3RlbmVyQ291bnQgPSAwO1xuICBfbmF0aXZlTW9kdWxlOiBOYXRpdmVNb2R1bGU7XG4gIF9ldmVudEVtaXR0ZXI6IE5hdGl2ZUV2ZW50RW1pdHRlcjtcblxuICBjb25zdHJ1Y3RvcihuYXRpdmVNb2R1bGU6IE5hdGl2ZU1vZHVsZSkge1xuICAgIHRoaXMuX25hdGl2ZU1vZHVsZSA9IG5hdGl2ZU1vZHVsZTtcbiAgICB0aGlzLl9ldmVudEVtaXR0ZXIgPSBuZXcgTmF0aXZlRXZlbnRFbWl0dGVyKG5hdGl2ZU1vZHVsZSBhcyBhbnkpO1xuICB9XG5cbiAgYWRkTGlzdGVuZXI8VD4oZXZlbnROYW1lOiBzdHJpbmcsIGxpc3RlbmVyOiAoZXZlbnQ6IFQpID0+IHZvaWQpOiBTdWJzY3JpcHRpb24ge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJDb3VudCAmJiBQbGF0Zm9ybS5PUyAhPT0gJ2lvcycgJiYgdGhpcy5fbmF0aXZlTW9kdWxlLnN0YXJ0T2JzZXJ2aW5nKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUuc3RhcnRPYnNlcnZpbmcoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9saXN0ZW5lckNvdW50Kys7XG4gICAgY29uc3QgbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbiA9IHRoaXMuX2V2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB7XG4gICAgICBbbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbktleV06IG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24sXG4gICAgICByZW1vdmU6ICgpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgcmVtb3ZlZExpc3RlbmVyQ291bnQgPSB0aGlzLl9ldmVudEVtaXR0ZXIubGlzdGVuZXJzKGV2ZW50TmFtZSkubGVuZ3RoO1xuICAgIHRoaXMuX2V2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKTtcbiAgICB0aGlzLl9saXN0ZW5lckNvdW50IC09IHJlbW92ZWRMaXN0ZW5lckNvdW50O1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuX2xpc3RlbmVyQ291bnQgPj0gMCxcbiAgICAgIGBFdmVudEVtaXR0ZXIgbXVzdCBoYXZlIGEgbm9uLW5lZ2F0aXZlIG51bWJlciBvZiBsaXN0ZW5lcnNgXG4gICAgKTtcblxuICAgIGlmICghdGhpcy5fbGlzdGVuZXJDb3VudCAmJiBQbGF0Zm9ybS5PUyAhPT0gJ2lvcycgJiYgdGhpcy5fbmF0aXZlTW9kdWxlLnN0b3BPYnNlcnZpbmcpIHtcbiAgICAgIHRoaXMuX25hdGl2ZU1vZHVsZS5zdG9wT2JzZXJ2aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgbmF0aXZlRW1pdHRlclN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbltuYXRpdmVFbWl0dGVyU3Vic2NyaXB0aW9uS2V5XTtcbiAgICBpZiAoIW5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudEVtaXR0ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKG5hdGl2ZUVtaXR0ZXJTdWJzY3JpcHRpb24hKTtcbiAgICB0aGlzLl9saXN0ZW5lckNvdW50LS07XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZW1pdHRlcidzIGludGVybmFsIHN0YXRlIHJlbWFpbnMgY29ycmVjdCBldmVuIGlmIGByZW1vdmVTdWJzY3JpcHRpb25gIGlzXG4gICAgLy8gY2FsbGVkIGFnYWluIHdpdGggdGhlIHNhbWUgc3Vic2NyaXB0aW9uXG4gICAgZGVsZXRlIHN1YnNjcmlwdGlvbltuYXRpdmVFbWl0dGVyU3Vic2NyaXB0aW9uS2V5XTtcblxuICAgIC8vIFJlbGVhc2UgY2xvc2VkLW92ZXIgcmVmZXJlbmNlcyB0byB0aGUgZW1pdHRlclxuICAgIHN1YnNjcmlwdGlvbi5yZW1vdmUgPSAoKSA9PiB7fTtcblxuICAgIGlmICghdGhpcy5fbGlzdGVuZXJDb3VudCAmJiBQbGF0Zm9ybS5PUyAhPT0gJ2lvcycgJiYgdGhpcy5fbmF0aXZlTW9kdWxlLnN0b3BPYnNlcnZpbmcpIHtcbiAgICAgIHRoaXMuX25hdGl2ZU1vZHVsZS5zdG9wT2JzZXJ2aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZW1pdChldmVudE5hbWU6IHN0cmluZywgLi4ucGFyYW1zOiBhbnlbXSk6IHZvaWQge1xuICAgIHRoaXMuX2V2ZW50RW1pdHRlci5lbWl0KGV2ZW50TmFtZSwgLi4ucGFyYW1zKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==