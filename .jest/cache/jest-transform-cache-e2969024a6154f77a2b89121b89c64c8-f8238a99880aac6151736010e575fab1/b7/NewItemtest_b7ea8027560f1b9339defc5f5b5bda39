cd3db0b7260f2b49dc14ca6199409c4c
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("@testing-library/react-native");

var useForm = _interopRequireWildcard(require("../../components/ItemForm/hooks/useForm"));

var itemsContext = _interopRequireWildcard(require("../../contexts/itemsContext"));

var _utils = _interopRequireDefault(require("../../tests/utils"));

var _NewItem = _interopRequireDefault(require("./NewItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var setItems = jest.fn();
var setContractItems = jest.fn();
jest.spyOn(itemsContext, 'useItemsContext').mockImplementation(function () {
  return {
    items: [],
    contractItems: {
      paris: {
        total: 0,
        items: []
      },
      london: {
        total: 0,
        items: []
      }
    },
    setItems: setItems,
    setContractItems: setContractItems
  };
});
var formData = {
  name: '',
  purchaseValue: '',
  description: '',
  mainPicture: '',
  receipt: '',
  additionalPicture: ''
};
jest.spyOn(useForm, 'default').mockImplementation(function () {
  return {
    formData: formData,
    isFormValid: false,
    setName: jest.fn(),
    setPurchaseValue: jest.fn(),
    setDescription: jest.fn(),
    setMainPicture: jest.fn(),
    setReceipt: jest.fn(),
    setAdditionalPicture: jest.fn()
  };
});
describe('NewItem', function () {
  it('should not add an item on empty form', function () {
    var _render = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render.getByText;

    var saveButton = getByText('Save');
    expect(saveButton).toBeTruthy();

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).not.toHaveBeenCalled();
    expect(setContractItems).not.toHaveBeenCalled();
  });
  it('should ad an item on filled form', function () {
    formData = _objectSpread(_objectSpread({}, formData), {}, {
      name: 'Test',
      purchaseValue: '100',
      mainPicture: '/pic',
      receipt: '/pic'
    });

    var _render2 = (0, _utils.default)(_react.default.createElement(itemsContext.default, null, _react.default.createElement(_NewItem.default, null))),
        getByText = _render2.getByText;

    var saveButton = getByText('Save');
    expect(saveButton).toBeTruthy();

    _reactNative.fireEvent.press(saveButton);

    expect(setItems).toHaveBeenCalled();
    expect(setContractItems).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5ld0l0ZW0udGVzdC50c3giXSwibmFtZXMiOlsic2V0SXRlbXMiLCJqZXN0IiwiZm4iLCJzZXRDb250cmFjdEl0ZW1zIiwic3B5T24iLCJpdGVtc0NvbnRleHQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJpdGVtcyIsImNvbnRyYWN0SXRlbXMiLCJwYXJpcyIsInRvdGFsIiwibG9uZG9uIiwiZm9ybURhdGEiLCJuYW1lIiwicHVyY2hhc2VWYWx1ZSIsImRlc2NyaXB0aW9uIiwibWFpblBpY3R1cmUiLCJyZWNlaXB0IiwiYWRkaXRpb25hbFBpY3R1cmUiLCJ1c2VGb3JtIiwiaXNGb3JtVmFsaWQiLCJzZXROYW1lIiwic2V0UHVyY2hhc2VWYWx1ZSIsInNldERlc2NyaXB0aW9uIiwic2V0TWFpblBpY3R1cmUiLCJzZXRSZWNlaXB0Iiwic2V0QWRkaXRpb25hbFBpY3R1cmUiLCJkZXNjcmliZSIsIml0IiwiZ2V0QnlUZXh0Iiwic2F2ZUJ1dHRvbiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7QUFJQSxJQUFNQSxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUFqQjtBQUNBLElBQU1DLGdCQUFnQixHQUFHRixJQUFJLENBQUNDLEVBQUwsRUFBekI7QUFDQUQsSUFBSSxDQUFDRyxLQUFMLENBQVdDLFlBQVgsRUFBeUIsaUJBQXpCLEVBQTRDQyxrQkFBNUMsQ0FBK0Q7QUFBQSxTQUFPO0FBQ3BFQyxJQUFBQSxLQUFLLEVBQUUsRUFENkQ7QUFFcEVDLElBQUFBLGFBQWEsRUFBRTtBQUNiQyxNQUFBQSxLQUFLLEVBQUU7QUFDTEMsUUFBQUEsS0FBSyxFQUFFLENBREY7QUFFTEgsUUFBQUEsS0FBSyxFQUFFO0FBRkYsT0FETTtBQUtiSSxNQUFBQSxNQUFNLEVBQUU7QUFDTkQsUUFB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O1xuaW1wb3J0IHsgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgKiBhcyB1c2VGb3JtIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvSXRlbUZvcm0vaG9va3MvdXNlRm9ybSc7XG5pbXBvcnQgSXRlbXNQcm92aWRlciwgKiBhcyBpdGVtc0NvbnRleHQgZnJvbSAnLi4vLi4vY29udGV4dHMvaXRlbXNDb250ZXh0JztcbmltcG9ydCByZW5kZXIgZnJvbSAnLi4vLi4vdGVzdHMvdXRpbHMnO1xuXG5pbXBvcnQgTmV3SXRlbSBmcm9tICcuL05ld0l0ZW0nO1xuXG4vKiAqKioqKiAqKioqKiAgQ29udGV4dHMgbW9ja3MgICoqKioqICoqKioqICovXG5cbmNvbnN0IHNldEl0ZW1zID0gamVzdC5mbigpO1xuY29uc3Qgc2V0Q29udHJhY3RJdGVtcyA9IGplc3QuZm4oKTtcbmplc3Quc3B5T24oaXRlbXNDb250ZXh0LCAndXNlSXRlbXNDb250ZXh0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gIGl0ZW1zOiBbXSxcbiAgY29udHJhY3RJdGVtczoge1xuICAgIHBhcmlzOiB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICB9LFxuICAgIGxvbmRvbjoge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBpdGVtczogW10sXG4gICAgfSxcbiAgfSxcbiAgc2V0SXRlbXMsXG4gIHNldENvbnRyYWN0SXRlbXMsXG59KSk7XG5cbmxldCBmb3JtRGF0YSA9IHtcbiAgbmFtZTogJycsXG4gIHB1cmNoYXNlVmFsdWU6ICcnLFxuICBkZXNjcmlwdGlvbjogJycsXG4gIG1haW5QaWN0dXJlOiAnJyxcbiAgcmVjZWlwdDogJycsXG4gIGFkZGl0aW9uYWxQaWN0dXJlOiAnJyxcbn07XG5qZXN0LnNweU9uKHVzZUZvcm0sICdkZWZhdWx0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gIGZvcm1EYXRhLFxuICBpc0Zvcm1WYWxpZDogZmFsc2UsXG4gIHNldE5hbWU6IGplc3QuZm4oKSxcbiAgc2V0UHVyY2hhc2VWYWx1ZTogamVzdC5mbigpLFxuICBzZXREZXNjcmlwdGlvbjogamVzdC5mbigpLFxuICBzZXRNYWluUGljdHVyZTogamVzdC5mbigpLFxuICBzZXRSZWNlaXB0OiBqZXN0LmZuKCksXG4gIHNldEFkZGl0aW9uYWxQaWN0dXJlOiBqZXN0LmZuKCksXG59KSk7XG5cbmRlc2NyaWJlKCdOZXdJdGVtJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG5vdCBhZGQgYW4gaXRlbSBvbiBlbXB0eSBmb3JtJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8SXRlbXNQcm92aWRlcj5cbiAgICAgICAgPE5ld0l0ZW0gLz5cbiAgICAgIDwvSXRlbXNQcm92aWRlcj4sXG4gICAgKTtcblxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBnZXRCeVRleHQoJ1NhdmUnKTtcbiAgICBleHBlY3Qoc2F2ZUJ1dHRvbikudG9CZVRydXRoeSgpO1xuICAgIGZpcmVFdmVudC5wcmVzcyhzYXZlQnV0dG9uKTtcblxuICAgIGV4cGVjdChzZXRJdGVtcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3Qoc2V0Q29udHJhY3RJdGVtcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBhZCBhbiBpdGVtIG9uIGZpbGxlZCBmb3JtJywgKCkgPT4ge1xuICAgIGZvcm1EYXRhID0ge1xuICAgICAgLi4uZm9ybURhdGEsXG4gICAgICBuYW1lOiAnVGVzdCcsXG4gICAgICBwdXJjaGFzZVZhbHVlOiAnMTAwJyxcbiAgICAgIG1haW5QaWN0dXJlOiAnL3BpYycsXG4gICAgICByZWNlaXB0OiAnL3BpYycsXG4gICAgfTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEl0ZW1zUHJvdmlkZXI+XG4gICAgICAgIDxOZXdJdGVtIC8+XG4gICAgICA8L0l0ZW1zUHJvdmlkZXI+LFxuICAgICk7XG5cbiAgICBjb25zdCBzYXZlQnV0dG9uID0gZ2V0QnlUZXh0KCdTYXZlJyk7XG4gICAgZXhwZWN0KHNhdmVCdXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgICBmaXJlRXZlbnQucHJlc3Moc2F2ZUJ1dHRvbik7XG5cbiAgICBleHBlY3Qoc2V0SXRlbXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBleHBlY3Qoc2V0Q29udHJhY3RJdGVtcykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl19